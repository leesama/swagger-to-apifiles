/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/application": {
    get: operations["applicationPageUsingGET"];
  };
  "/breed/code": {
    get: operations["breedCodePageUsingGET"];
  };
  "/breeds": {
    get: operations["pageUsingGET_1"];
  };
  "/club-segment-relation": {
    post: operations["saveClubSegmentRelationUsingPOST"];
  };
  "/collections-with-related-products": {
    get: operations["pageUsingGET"];
  };
  "/consent": {
    get: operations["consentListUsingGET"];
    put: operations["editUsingPUT"];
    post: operations["addUsingPOST"];
  };
  "/consent/{id}": {
    delete: operations["deleteConsentUsingDELETE"];
  };
  "/customer": {
    put: operations["editCustomerUsingPUT"];
  };
  "/customer-category": {
    put: operations["updateUsingPUT"];
    post: operations["addUsingPOST_1"];
  };
  "/customer-category/image": {
    post: operations["uploadImageUsingPOST"];
  };
  "/customer-category/{id}": {
    get: operations["findByIdUsingGET"];
    delete: operations["deleteUsingDELETE"];
  };
  "/customer-categorys": {
    get: operations["findPageUsingGET"];
  };
  "/customer-coached-segment": {
    get: operations["customerCoachedSegmentUsingGET"];
  };
  "/customer-feedback": {
    get: operations["customerFeedbackUsingGET"];
    put: operations["alterFeedBackUsingPUT"];
  };
  "/customer-legal": {
    get: operations["findAllLegalByCustomerIdUsingGET"];
  };
  "/customer-pets-prop-relation/{id}": {
    get: operations["queryByPetsIdUsingGET"];
  };
  "/customer-pets/{id}": {
    get: operations["findByPetsIdUsingGET"];
    delete: operations["deleteUsingDELETE_1"];
  };
  "/customer-segment": {
    get: operations["customerSegmentUsingGET"];
  };
  "/customer-synchronization": {
    get: operations["querySyncUsingGET"];
    put: operations["updateSyncUsingPUT"];
    post: operations["createSyncUsingPOST"];
  };
  "/customer-tagging": {
    put: operations["updateUsingPUT_1"];
    post: operations["addUsingPOST_2"];
  };
  "/customer-tagging-relation": {
    post: operations["addSegmentCustomerRelUsingPOST"];
  };
  "/customer-tagging/status": {
    put: operations["updateStatusUsingPUT"];
  };
  "/customer-tagging/{id}": {
    get: operations["findByIdUsingGET_2"];
    delete: operations["deleteUsingDELETE_2"];
  };
  "/customer-taggings": {
    get: operations["findPageUsingGET_1"];
  };
  "/customer/excel": {
    post: operations["customerB2CExcelUsingPOST"];
  };
  "/customer/excel-b2b": {
    post: operations["customerB2BExcelUsingPOST"];
  };
  "/customer/excel-history-b2b": {
    get: operations["findHistoryPageB2BUsingGET"];
  };
  "/customer/excel-history-b2c": {
    get: operations["findHistoryPageUsingGET"];
  };
  "/customer/excel-template": {
    get: operations["exportTemplateB2CUsingGET"];
  };
  "/customer/excel-template-b2b": {
    get: operations["exportTemplateB2BUsingGET"];
  };
  "/customer/{customerId}": {
    get: operations["customerDetailUsingGET"];
  };
  "/customers": {
    get: operations["customerPageUsingGET"];
  };
  "/customersNew": {
    post: operations["customerPageNewUsingPOST"];
  };
  "/event-grid/receiver": {
    post: operations["receiveDataUsingPOST"];
  };
  "/home/query": {
    get: operations["queryUsingGET"];
  };
  "/home/search": {
    get: operations["searchUsingGET"];
  };
  "/lifestyleSync": {
    get: operations["speciesCodeSyncUsingGET"];
  };
  "/okta/auth/login-out": {
    post: operations["loginOutUsingPOST"];
  };
  "/okta/auth/po/callback": {
    post: operations["poOktaCallbackUsingPOST"];
  };
  "/okta/auth/token": {
    post: operations["getJwtTokenUsingPOST"];
  };
  "/partner": {
    put: operations["editRcInformationUsingPUT"];
  };
  "/partner-breed": {
    post: operations["addUsingPOST_3"];
  };
  "/partner-breed/species": {
    get: operations["speciesUsingGET"];
  };
  "/partner-breed/sync": {
    get: operations["breedSyncUsingGET"];
  };
  "/partner-breed/universes": {
    get: operations["universesUsingGET"];
  };
  "/partner-breed/{id}": {
    delete: operations["deleteUsingDELETE_3"];
  };
  "/partner-breeds": {
    get: operations["pageUsingGET_2"];
  };
  "/partner-group": {
    put: operations["editUsingPUT_1"];
    post: operations["addUsingPOST_4"];
  };
  "/partner-group-history": {
    get: operations["historyUsingGET"];
  };
  "/partner-group-member": {
    get: operations["findByIdUsingGET_3"];
  };
  "/partner-group-member/{id}": {
    delete: operations["deleteMemberUsingDELETE"];
  };
  "/partner-group-members": {
    get: operations["memberUsingGET"];
  };
  "/partner-group/download/excel/{url}": {
    get: operations["downloadExcelUsingGET"];
  };
  "/partner-group/download/image/{url}": {
    get: operations["downloadImageUsingGET"];
  };
  "/partner-group/excel": {
    post: operations["uploadExcelUsingPOST"];
  };
  "/partner-group/image": {
    post: operations["uploadImageUsingPOST_1"];
  };
  "/partner-group/member/excel": {
    get: operations["exportGroupMemberUsingGET"];
    post: operations["importPartnerGroupMemberUsingPOST"];
  };
  "/partner-group/member/excel/template": {
    get: operations["exportTemplateUsingGET_1"];
  };
  "/partner-group/{id}": {
    delete: operations["deleteUsingDELETE_4"];
  };
  "/partner-groups": {
    get: operations["pageUsingGET_3"];
  };
  "/partner-invoice/{id}": {
    get: operations["queryUsingGET_1"];
  };
  "/partner-public/{id}": {
    get: operations["queryUsingGET_2"];
  };
  "/partner-relationship-b2b": {
    put: operations["updateUsingPUT_2"];
    post: operations["addUsingPOST_5"];
  };
  "/partner-relationship-b2b/contacts": {
    get: operations["contactUsingGET"];
  };
  "/partner-relationship-b2b/primary-contact": {
    put: operations["updatePrimaryContactUsingPUT"];
  };
  "/partner-relationship-b2b/roles": {
    get: operations["rolesUsingGET"];
  };
  "/partner-relationship-b2b/{id}": {
    get: operations["findByIdUsingGET_4"];
    delete: operations["deleteUsingDELETE_5"];
  };
  "/partner-relationship-b2bs": {
    get: operations["pageUsingGET_4"];
  };
  "/partner-relationship-b2c": {
    put: operations["updateUsingPUT_3"];
    post: operations["addUsingPOST_6"];
  };
  "/partner-relationship-b2c/contacts": {
    get: operations["contactUsingGET_1"];
  };
  "/partner-relationship-b2c/{id}": {
    get: operations["findByIdUsingGET_5"];
    delete: operations["deleteUsingDELETE_6"];
  };
  "/partner-relationship-b2cs": {
    get: operations["pageUsingGET_5"];
  };
  "/partner-relationship/sync": {
    put: operations["syncRelationShipByCompanyIdUsingPUT"];
    post: operations["addUsingPOST_7"];
    delete: operations["deleteUsingDELETE_7"];
  };
  "/partner-relationship/sync/list": {
    get: operations["syncListUsingGET"];
  };
  "/partner-relationship/sync/{id}": {
    get: operations["syncRelationShipByCompanyIdUsingGET"];
  };
  "/partner/sync": {
    post: operations["synchronizePartnerListUsingPOST"];
  };
  "/partner/{id}": {
    get: operations["queryRcInformationUsingGET"];
  };
  "/partners": {
    get: operations["partnerPageUsingGET"];
  };
  "/pets-assigned-partner-contacts": {
    get: operations["queryByPetsIdUsingGET_1"];
  };
  "/pets-health-contexts": {
    get: operations["queryByPetsIdUsingGET_2"];
  };
  "/pets-ownership-historys": {
    get: operations["queryByPetsIdUsingGET_3"];
  };
  "/pets-purchase-place-preferences": {
    get: operations["queryByPetsIdUsingGET_4"];
  };
  "/pets-weight-bcs": {
    get: operations["queryByPetsIdUsingGET_5"];
  };
  "/pets/excel": {
    post: operations["importCustomerPetsListUsingPOST"];
  };
  "/pets/excel/template": {
    get: operations["exportTemplateUsingGET"];
  };
  "/pets/history/excel": {
    get: operations["historyPageUsingGET"];
  };
  "/pets/{id}": {
    get: operations["findByIdUsingGET_1"];
  };
  "/pox-goods": {
    get: operations["pageUsingGET_6"];
  };
  "/pox-goods-detail/extnernalId/{extnernalId}": {
    get: operations["detailByExtnernalIdUsingGET"];
  };
  "/pox-goods-detail/{id}": {
    get: operations["detailUsingGET"];
  };
  "/pox-goods-info": {
    get: operations["pageUsingGET_7"];
  };
  "/pox-goods-info/{id}": {
    get: operations["queryUsingGET_3"];
  };
  "/pox-goods-sync": {
    get: operations["syncPoxGoodsUsingGET"];
  };
  "/product-group": {
    put: operations["editUsingPUT_2"];
    post: operations["addUsingPOST_8"];
  };
  "/product-group/excel-export/{id}": {
    get: operations["exportExcelUsingGET"];
  };
  "/product-group/excel-history": {
    get: operations["excelHistoryUsingGET"];
  };
  "/product-group/excel-import": {
    post: operations["importExcelUsingPOST"];
  };
  "/product-group/excel-template": {
    get: operations["exportTemplateUsingGET_2"];
  };
  "/product-group/{id}": {
    delete: operations["deleteUsingDELETE_8"];
  };
  "/product-groups": {
    get: operations["pageUsingGET_8"];
  };
  "/product-member": {
    get: operations["findByGroupIdUsingGET"];
    put: operations["editUsingPUT_3"];
    post: operations["addUsingPOST_9"];
  };
  "/product-member/{id}": {
    delete: operations["deleteUsingDELETE_9"];
  };
  "/product/tagging": {
    put: operations["updateTaggingUsingPUT"];
    post: operations["addTaggingUsingPOST"];
    delete: operations["deleteTaggingUsingDELETE"];
  };
  "/product/tagging/list": {
    get: operations["findTaggingListUsingGET"];
  };
  "/product/taggings": {
    get: operations["findTaggingPageUsingGET"];
  };
  "/productFinder": {
    post: operations["findPageUsingPOST"];
  };
  "/sagment-relation": {
    post: operations["addSegmentRelationUsingPOST"];
  };
  "/segment-customer-relation/{id}": {
    delete: operations["deleteSegmentCustomerRelByIdUsingDELETE"];
  };
  "/speciesCodeSync": {
    get: operations["speciesCodeSyncUsingGET_1"];
  };
  "/subscription-preferences": {
    put: operations["updateUsingPUT_4"];
  };
  "/subscription-preferences/{id}": {
    get: operations["subscriptionPreferencesListUsingGET"];
  };
  "/welcome-box-tag": {
    post: operations["saveWelcomeBoxTagUsingPOST"];
  };
}

export interface definitions {
  AddTaggingRequest: {
    createTime?: string;
    delFlag?: boolean;
    delTime?: string;
    displayStatus?: boolean;
    id?: string;
    productNum?: number;
    showPage?: string;
    sort?: number;
    storeId?: number;
    taggingFillColor?: string;
    taggingFontColor?: string;
    taggingImgUrl?: string;
    taggingName?: string;
    taggingType?: string;
    updateTime?: string;
  };
  ApplicationPageResponse: {
    /** Application list */
    applications?: definitions["ApplicationVO"][];
  };
  ApplicationVO: {
    /** application name */
    applicationName?: string;
    /** client id */
    clientId?: string;
    /** comment */
    comment?: string;
    /** create On */
    createOn?: string;
    /** create Time */
    createTime?: string;
    /**
     * del Flag
     * * NO: no
     * * YES: yes
     */
    delFlag?: 0 | 1;
    /** del Time */
    delTime?: string;
    /** primary key */
    id?: string;
    /** update On */
    updateOn?: string;
    /** update Time */
    updateTime?: string;
  };
  "BaseResponse«ApplicationPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["ApplicationPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«Array«string»»": {
    /** Result code */
    code: string;
    /** content */
    context?: ("EDITOR" | "ADMIN")[];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«BreedCodePageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["BreedCodePageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«BreedPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["BreedPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«CollectionsWithRelatedProductsPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["CollectionsWithRelatedProductsPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«ConsentQueryResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["ConsentQueryResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«ConsentVO»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["ConsentVO"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«CustomerCategoryPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["CustomerCategoryPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«CustomerCategoryVO»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["CustomerCategoryVO"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«CustomerCreateSyncResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["CustomerCreateSyncResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«CustomerDetailGetWithNotDeleteByCustomerIdResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["CustomerDetailGetWithNotDeleteByCustomerIdResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«CustomerExcelHistoryPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["CustomerExcelHistoryPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«CustomerFeedbackPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["CustomerFeedbackPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«CustomerFeedbackSaveResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["CustomerFeedbackSaveResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«CustomerLegalPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["CustomerLegalPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«CustomerPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["CustomerPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«CustomerPetsPropRelationListVo»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["CustomerPetsPropRelationListVo"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«CustomerPetsVo»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["CustomerPetsVo"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«CustomerQuerySyncResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["CustomerQuerySyncResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«CustomerSegmentsPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["CustomerSegmentsPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«CustomerTaggingPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["CustomerTaggingPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«CustomerTaggingVO»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["CustomerTaggingVO"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«CustomerUpdateSyncResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["CustomerUpdateSyncResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«FindTaggingPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["FindTaggingPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«GroupPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["GroupPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«HistoryPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["HistoryPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«HomeSearchResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["HomeSearchResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«JwtTokenResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["JwtTokenResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«List«CustomerBulkAddResponse»»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["CustomerBulkAddResponse"][];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«List«PartnerBreedSpeciesResponse»»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PartnerBreedSpeciesResponse"][];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«List«PartnerBreedUniversesResponse»»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PartnerBreedUniversesResponse"][];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«List«TaggingVO»»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["TaggingVO"][];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«MemberPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["MemberPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PartnerBreedPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PartnerBreedPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PartnerBreedVO»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PartnerBreedVO"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PartnerGroupVO»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PartnerGroupVO"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PartnerInvoiceQueryResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PartnerInvoiceQueryResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PartnerMemberVO»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PartnerMemberVO"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PartnerPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PartnerPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PartnerPublicQueryResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PartnerPublicQueryResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PartnerRcInformationEditResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PartnerRcInformationEditResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PartnerRcInformationQueryResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PartnerRcInformationQueryResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PartnerRelationShipSyncAddResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PartnerRelationShipSyncAddResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PartnerRelationShipSyncDeleteResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PartnerRelationShipSyncDeleteResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PartnerRelationShipSyncEditResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PartnerRelationShipSyncEditResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PartnerRelationShipSyncForCompanyIdResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PartnerRelationShipSyncForCompanyIdResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PartnerRelationShipSyncListResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PartnerRelationShipSyncListResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PartnerRelationshipB2bPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PartnerRelationshipB2bPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PartnerRelationshipB2bVO»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PartnerRelationshipB2bVO"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PartnerRelationshipB2cPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PartnerRelationshipB2cPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PartnerRelationshipB2cVO»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PartnerRelationshipB2cVO"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PartnerRelationshipResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PartnerRelationshipResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PartnerSynResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PartnerSynResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PetsAssignedPartnerContactsPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PetsAssignedPartnerContactsPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PetsHealthContextPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PetsHealthContextPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PetsIdsVo»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PetsIdsVo"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PetsOwnershipHistoryPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PetsOwnershipHistoryPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PetsPurchasePlacePreferencesPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PetsPurchasePlacePreferencesPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PetsWeightBcsSeriesPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PetsWeightBcsSeriesPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PoxGoodsDetailVO»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PoxGoodsDetailVO"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PoxGoodsInfoPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PoxGoodsInfoPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PoxGoodsInfoResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PoxGoodsInfoResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PoxGoodsPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PoxGoodsPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«PreferencesPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["PreferencesPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«ProductGroupPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["ProductGroupPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«ProductGroupResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["ProductGroupResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«ProductHistoryPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["ProductHistoryPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«ProductMemberPageResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["ProductMemberPageResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«ProductMemberResponse»": {
    /** Result code */
    code: string;
    /** content */
    context?: definitions["ProductMemberResponse"];
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«boolean»": {
    /** Result code */
    code: string;
    /** content */
    context?: boolean;
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«object»": {
    /** Result code */
    code: string;
    /** content */
    context?: { [key: string]: any };
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  "BaseResponse«string»": {
    /** Result code */
    code: string;
    /** content */
    context?: string;
    defaultLocalDateTime?: string;
    /** technical message */
    detailMessage?: string;
    /** Error content */
    errorData?: { [key: string]: any };
    /** i18n params */
    i18nParams?: { [key: string]: any }[];
    /** internal message */
    internalMessage?: string;
    /** Message content */
    message?: string;
  };
  BreedCodePageResponse: {
    breedCodeVOS?: definitions["MicroServicePage«BreedCodeVO»"];
  };
  BreedCodeVO: {
    breedCode?: string;
  };
  BreedPageResponse: {
    breedVOS?: definitions["MicroServicePage«BreedVO»"];
  };
  BreedVO: {
    breedCode?: string;
    breedName?: string;
    createTime?: string;
    delFlag?: boolean;
    delTime?: string;
    externalId?: string;
    id?: string;
    origin?: boolean;
    species?: string;
    universe?: string;
    updateTime?: string;
  };
  ClubSegmentRelSaveRequest: {
    customerStoreRelations?: definitions["CustomerStoreRelation"][];
    id?: string;
  };
  CollectionsWithRelatedProductsPageResponse: {
    /** RelatedProductsCollection page */
    collectionWithRelatedProducts?: definitions["MicroServicePage«CollectionsWithRelatedProductsVO»"];
  };
  CollectionsWithRelatedProductsVO: {
    /** code */
    code?: string;
    /** collection reference */
    collectionReference?: string;
    /** create On */
    createOn?: string;
    /** create Time */
    createTime?: string;
    /**
     * del Flag
     * * NO: no
     * * YES: yes
     */
    delFlag?: 0 | 1;
    /** del Time */
    delTime?: string;
    /** ean */
    ean?: string;
    /** generic name */
    genericName?: string;
    /** primary key */
    id?: string;
    /** label */
    label?: string;
    /** pox goods id */
    poxGoodsId?: string;
    /** update On */
    updateOn?: string;
    /** update Time */
    updateTime?: string;
  };
  ConsentDetailDTO: {
    /** consent主键 */
    consentKey?: string;
    /** 内容 */
    contentBody?: string;
    /** 内容标题 */
    contentTitle?: string;
    /** 创建人 */
    createBy?: string;
    /** 创建时间 */
    createTime?: string;
    /** 主键 */
    id?: number;
    /** 排序 */
    sort?: number;
    /** 修改人 */
    updateBy?: string;
    /** 修改时间 */
    updateTime?: string;
  };
  ConsentDetailVO: {
    /** consent Primary key */
    consentKey?: number;
    /** content */
    contentBody?: string;
    /** content title */
    contentTitle?: string;
    /** createBy */
    createBy?: string;
    /** create time */
    createTime?: string;
    /** Primary key */
    id?: number;
    /** sort */
    sort?: number;
    /** updateBy */
    updateBy?: string;
    /** update time */
    updateTime?: string;
  };
  ConsentQueryResponse: {
    /** consent list */
    consentVOList?: definitions["MicroServicePage«ConsentVO»"];
  };
  ConsentSaveInRequest: {
    communicationType?: string;
    consentCategory?: string;
    consentCode?: string;
    consentDesc?: string;
    consentDetailList?: definitions["ConsentDetailDTO"][];
    consentGroup?: string;
    consentId?: string;
    consentPage?: string;
    consentTitle?: string;
    consentTitleType?: string;
    consentType?: "0" | "1" | "2";
    consentVersion?: string;
    deleteFlag?: "0" | "1";
    filedType?: string;
    id?: string;
    languageTypeId?: number;
    openFlag?: "0" | "1";
    operatorId?: string;
    parentId?: number;
    pushOktaFlag?: "0" | "1";
    sort?: number;
    storeId?: number;
    /** user id */
    userId?: string;
  };
  ConsentVO: {
    communicationType?: string;
    consentCategory?: string;
    consentCode?: string;
    consentDesc?: string;
    consentGroup?: string;
    consentId?: string;
    consentPage?: string;
    consentTitle?: string;
    consentTitleType?: string;
    consentType?: "0" | "1" | "2";
    consentVersion?: string;
    createBy?: string;
    /** createTime */
    createTime?: string;
    deleteBy?: string;
    deleteFlag?: "0" | "1";
    /** deleteTime */
    deleteTime?: string;
    filedType?: string;
    id?: string;
    languageTypeId?: number;
    openFlag?: "0" | "1";
    parentId?: number;
    pushOktaFlag?: "0" | "1";
    selected?: boolean;
    sendEmailFlag?: "0" | "1";
    sort?: number;
    storeId?: number;
    updateBy?: string;
    /** updateTime */
    updateTime?: string;
  };
  Credentials: {
    password?: definitions["Password"];
  };
  CustomerBulkAddResponse: {
    /** account type */
    accountType?: string;
    /** activation origin */
    activationOrigin?: string;
    /** activation origin details */
    activationOriginDetails?: string;
    /** city */
    city?: string;
    /** civility */
    civility?: string;
    /** country */
    country?: string;
    /** creation date */
    creationDate?: string;
    /** creation origin */
    creationOrigin?: string;
    /** creation origin details */
    creationOriginDetails?: string;
    /** registration source */
    customerFrom?: string;
    /** date of birth */
    dateOfBirth?: string;
    /** email */
    email?: string;
    /** ext id of the partner */
    externalIdNo?: string;
    /** first name */
    firstName?: string;
    /** internal status */
    internalStatus?: string;
    /** lang */
    lang?: string;
    /** last name */
    lastName?: string;
    /** mobile */
    mobilePhone?: string;
    /** okta id */
    oktaId?: string;
    /** post code */
    postalCode?: string;
    /** province */
    province?: string;
    /** purchase place preferences separated by */
    purchase?: string;
    /** roles of the partner separated by */
    roles?: string;
    /** street */
    street?: string;
    /** street number */
    streetNumber?: string;
    /** subscription preferences separated by */
    subscription?: string;
    /** sync already exist */
    syncAlreadyExist?: boolean;
    /** sync message */
    syncMessage?: string;
    /** sync result */
    syncResult?: boolean;
    /** login user Id */
    userId?: string;
    /** username */
    username?: string;
  };
  CustomerCategoryAddRequest: {
    createPerson?: string;
    customerCategoryDiscount?: number;
    customerCategoryName?: string;
    growthValue?: number;
    rankBadgeImg?: string;
    storeId?: number;
  };
  CustomerCategoryPageResponse: {
    currentPage?: number;
    customerCategoryList?: definitions["CustomerCategoryVO"][];
    pageSize?: number;
    total?: number;
  };
  CustomerCategoryUpdateRequest: {
    customerCategoryDiscount?: number;
    customerCategoryId?: string;
    customerCategoryName?: string;
    growthValue?: number;
    isDefalt?: boolean;
    rankBadgeImg?: string;
    storeId?: number;
    updatePerson?: string;
  };
  CustomerCategoryVO: {
    createPerson?: string;
    createTime?: string;
    customerCategoryDiscount?: number;
    customerCategoryId?: string;
    customerCategoryName?: string;
    delFlag?: boolean;
    deletePerson?: string;
    deleteTime?: string;
    growthValue?: number;
    isDefalt?: boolean;
    rankBadgeImg?: string;
    storeId?: number;
    updatePerson?: string;
    updateTime?: string;
  };
  CustomerClinicsVO: {
    /** Data master ID */
    clinicsId?: string;
    /** hospital name */
    clinicsName?: string;
    /** recommendationCode */
    recommendationCode?: string;
  };
  CustomerCreateSyncRequest: {
    callback?: string;
    credentials?: definitions["Credentials"];
    locale?: string;
    profile?: definitions["Profile"];
  };
  CustomerCreateSyncResponse: {
    oktaId?: string;
    success?: boolean;
  };
  CustomerDTO: {
    accountType?: "0" | "1" | "2" | "3";
    address1?: string;
    address2?: string;
    avatar?: string;
    birthDay?: string;
    city?: string;
    contactMethod?: string;
    country?: string;
    createPerson?: string;
    createTime?: string;
    customerAccount?: string;
    customerDetailId?: string;
    customerFrom?: number;
    customerId?: string;
    customerName?: string;
    customerType?: "0" | "1";
    deletePerson?: string;
    deleteTime?: string;
    email?: string;
    emailVerified?: string;
    firstName?: string;
    gender?: "0" | "1" | "2";
    language?: string;
    lastName?: string;
    mobilePhone?: string;
    oktaId?: string;
    oktaState?: number;
    petOwnerType?: "0" | "1" | "2";
    postalCode?: string;
    profileCompilation?: string;
    reference?: string;
    region?: string;
    timezone?: string;
    title?: string;
    updatePerson?: string;
    updateTime?: string;
    userType?: string;
  };
  CustomerDetailGetWithNotDeleteByCustomerIdResponse: {
    /** activation origin */
    activationOrigin?: string;
    /** activation origin details */
    activationOriginDetails?: string;
    /** alert message */
    alert?: string;
    /** Apartment Number */
    appartmentNo?: string;
    /** area */
    areaId?: number;
    /** avatar */
    avatar?: string;
    /** birthday */
    birthDay?: string;
    /** city */
    cityId?: number;
    /** Clinic name */
    clinicsVOS?: definitions["CustomerClinicsVO"][];
    /** communicationEmail */
    communicationEmail?: string;
    /** communicationPhone */
    communicationPhone?: string;
    /** communicationPrint */
    communicationPrint?: string;
    /** Contact Information */
    contactMethod?: string;
    /** Contact name */
    contactName?: string;
    /** Contact information */
    contactPhone?: string;
    /** Country Id */
    countryId?: number;
    /** founder */
    createPerson?: string;
    /** Creation time */
    createTime?: string;
    /** creation origin */
    creationOrigin?: string;
    /** creation origin details */
    creationOriginDetails?: string;
    /** customerAccount */
    customerAccount?: string;
    /** Detailed Address */
    customerAddress?: string;
    /** Member details identify the UUID */
    customerDetailId?: string;
    /** customer from */
    customerFrom?: number;
    /** Member ID */
    customerId?: string;
    /** Name of member */
    customerName?: string;
    /** customer pets */
    customerPets?: definitions["CustomerPetsVo"][];
    /**
     * Account Status
     * * ENABLE: 0：Active
     * * DISABLE: 1：Disabled
     */
    customerStatus?: 0 | 1;
    customerTaggingList?: { [key: string]: any }[];
    /** member information */
    customerVO?: definitions["CustomerVO"];
    /** Default clinic */
    defaultClinics?: definitions["CustomerClinicsVO"];
    /**
     * Delete flag
     * * NO: no
     * * YES: yes
     */
    delFlag?: 0 | 1;
    /** Delete Person */
    deletePerson?: string;
    /** Delete time */
    deleteTime?: string;
    /** Department */
    department?: string;
    /** area */
    district?: string;
    /** email verified */
    emailVerified?: string;
    /** In charge of the sales staff */
    employeeId?: string;
    /** external id no */
    externalIdNo?: string;
    /** Reasons for prohibition */
    forbidReason?: string;
    /**
     * Gender, 0 female, 1 male
     * * FEMALE: female
     * * MALE: male
     * * SECRET: secret
     */
    gender?: 0 | 1 | 2;
    /** House */
    house?: string;
    /** Housing */
    housing?: string;
    /**
     * Are you a distributor
     * * NO: no
     * * YES: yes
     */
    isDistributor?: 0 | 1;
    /** Whether it is an employee 0: No 1: Yes */
    isEmployee?: number;
    /** language */
    language?: string;
    /** mobile phone */
    mobilePhone?: string;
    /** okta id */
    oktaId?: string;
    /** okta last updated time */
    oktaLastUpdatedTime?: string;
    /** okta password changed time */
    oktaPasswordChangedTime?: string;
    /** okta state */
    oktaState?: number;
    /** Zip code */
    postCode?: string;
    /** profile compilation */
    profileCompilation?: string;
    /** province */
    province?: string;
    /** province */
    provinceId?: number;
    /** recommendationCode */
    recommendationCode?: string;
    /** Reference */
    reference?: string;
    /** province */
    region?: string;
    /** Review the reasons for rejection */
    rejectReason?: string;
    segmentList?: definitions["CustomerTaggingVO"][];
    sfccCityCode?: string;
    /** State */
    state?: string;
    /** A/B Test分组，取值为A、B */
    testGroup?: string;
    /** Time zone */
    timezone?: string;
    /** the modifier */
    updatePerson?: string;
    /** Modification time */
    updateTime?: string;
    userConsentList?: definitions["UserConsentVO"][];
    /** user type */
    userType?: string;
    /**
     * valid result :BoolFlag emun
     * * NO: no
     * * YES: yes
     */
    validFlag?: 0 | 1;
  };
  CustomerDetailVO: {
    /** activation origin */
    activationOrigin?: string;
    /** activation origin details */
    activationOriginDetails?: string;
    /** alert message */
    alert?: string;
    /** Apartment Number */
    appartmentNo?: string;
    /** area */
    areaId?: number;
    /** avatar */
    avatar?: string;
    /** birthday */
    birthDay?: string;
    /** city */
    cityId?: number;
    /** Clinic name */
    clinicsVOS?: definitions["CustomerClinicsVO"][];
    /** communicationEmail */
    communicationEmail?: string;
    /** communicationPhone */
    communicationPhone?: string;
    /** communicationPrint */
    communicationPrint?: string;
    /** Contact Information */
    contactMethod?: string;
    /** Contact name */
    contactName?: string;
    /** Contact information */
    contactPhone?: string;
    /** Country Id */
    countryId?: number;
    /** founder */
    createPerson?: string;
    /** Creation time */
    createTime?: string;
    /** creation origin */
    creationOrigin?: string;
    /** creation origin details */
    creationOriginDetails?: string;
    /** customerAccount */
    customerAccount?: string;
    /** Detailed Address */
    customerAddress?: string;
    /** Member details identify the UUID */
    customerDetailId?: string;
    /** customer from */
    customerFrom?: number;
    /** Member ID */
    customerId?: string;
    /** Name of member */
    customerName?: string;
    /** customer pets */
    customerPets?: definitions["CustomerPetsVo"][];
    /**
     * Account Status
     * * ENABLE: 0：Active
     * * DISABLE: 1：Disabled
     */
    customerStatus?: 0 | 1;
    customerTaggingList?: { [key: string]: any }[];
    /** member information */
    customerVO?: definitions["CustomerVO"];
    /** Default clinic */
    defaultClinics?: definitions["CustomerClinicsVO"];
    /**
     * Delete flag
     * * NO: no
     * * YES: yes
     */
    delFlag?: 0 | 1;
    /** Delete Person */
    deletePerson?: string;
    /** Delete time */
    deleteTime?: string;
    /** Department */
    department?: string;
    /** area */
    district?: string;
    /** email verified */
    emailVerified?: string;
    /** In charge of the sales staff */
    employeeId?: string;
    /** external id no */
    externalIdNo?: string;
    /** Reasons for prohibition */
    forbidReason?: string;
    /**
     * Gender, 0 female, 1 male
     * * FEMALE: female
     * * MALE: male
     * * SECRET: secret
     */
    gender?: 0 | 1 | 2;
    /** House */
    house?: string;
    /** Housing */
    housing?: string;
    /**
     * Are you a distributor
     * * NO: no
     * * YES: yes
     */
    isDistributor?: 0 | 1;
    /** Whether it is an employee 0: No 1: Yes */
    isEmployee?: number;
    /** language */
    language?: string;
    /** mobile phone */
    mobilePhone?: string;
    /** okta id */
    oktaId?: string;
    /** okta last updated time */
    oktaLastUpdatedTime?: string;
    /** okta password changed time */
    oktaPasswordChangedTime?: string;
    /** okta state */
    oktaState?: number;
    /** Zip code */
    postCode?: string;
    /** profile compilation */
    profileCompilation?: string;
    /** province */
    province?: string;
    /** province */
    provinceId?: number;
    /** recommendationCode */
    recommendationCode?: string;
    /** Reference */
    reference?: string;
    /** province */
    region?: string;
    /** Review the reasons for rejection */
    rejectReason?: string;
    segmentList?: definitions["CustomerTaggingVO"][];
    sfccCityCode?: string;
    /** State */
    state?: string;
    /** A/B Test分组，取值为A、B */
    testGroup?: string;
    /** Time zone */
    timezone?: string;
    /** the modifier */
    updatePerson?: string;
    /** Modification time */
    updateTime?: string;
    userConsentList?: definitions["UserConsentVO"][];
    /** user type */
    userType?: string;
    /**
     * valid result :BoolFlag emun
     * * NO: no
     * * YES: yes
     */
    validFlag?: 0 | 1;
  };
  CustomerExcelHistoryPageResponse: {
    partnerGroupHistoryVOS?: definitions["MicroServicePage«CustomerExcelHistoryVO»"];
  };
  CustomerExcelHistoryVO: {
    /** history file */
    historyFile?: string;
    /** id */
    id?: string;
    /** history file */
    rows?: number;
    /**
     * pet or customer
     * * OTHER: 0:other
     * * PET: 1:pet
     * * CUSTOMER: 2:customer
     * * B2B: 3:b2c
     */
    type?: 0 | 1 | 2 | 3;
    /** history file */
    upLoadTime?: string;
  };
  CustomerFeedbackPageResponse: {
    pageResponse?: definitions["MicroServicePage«CustomerFeedbackVO»"];
  };
  CustomerFeedbackSaveRequest: {
    clinicsRating1?: number;
    clinicsRating2?: number;
    comments2rd?: string;
    createPerson?: string;
    createTime?: string;
    /**
     * * NO: no
     * * YES: yes
     */
    delFlag?: 0 | 1;
    deletePerson?: string;
    deleteTime?: string;
    /**
     * * NO: no
     * * YES: yes
     */
    deliveryScheduleFit2rd?: 0 | 1;
    deliveryScheduleFitReason2rd?: string;
    feedbackId?: string;
    interestReason2rd?: string;
    nps2rd?: number;
    petOwnerId?: string;
    qualityOfService1?: number;
    qualityOfService2?: number;
    rateComments?: string;
    rateDelivery?: number;
    ratePack?: number;
    storeId?: number;
    updatePerson?: string;
    updateTime?: string;
    vetClinicCheckup1?: number;
    vetClinicCheckup2?: number;
    veterinarianQualification1?: number;
    veterinarianQualification2?: number;
  };
  CustomerFeedbackSaveResponse: {
    clinicsRating1?: number;
    clinicsRating2?: number;
    comments2rd?: string;
    createPerson?: string;
    createTime?: string;
    /**
     * * NO: no
     * * YES: yes
     */
    delFlag?: 0 | 1;
    deletePerson?: string;
    deleteTime?: string;
    /**
     * * NO: no
     * * YES: yes
     */
    deliveryScheduleFit2rd?: 0 | 1;
    deliveryScheduleFitReason2rd?: string;
    feedbackId?: string;
    interestReason2rd?: string;
    nps2rd?: number;
    petOwnerId?: string;
    qualityOfService1?: number;
    qualityOfService2?: number;
    rateComments?: string;
    rateDelivery?: number;
    ratePack?: number;
    storeId?: number;
    updatePerson?: string;
    updateTime?: string;
    vetClinicCheckup1?: number;
    vetClinicCheckup2?: number;
    veterinarianQualification1?: number;
    veterinarianQualification2?: number;
  };
  CustomerFeedbackVO: {
    clinicsRating1?: number;
    clinicsRating2?: number;
    comments2rd?: string;
    createPerson?: string;
    createTime?: string;
    /**
     * * NO: no
     * * YES: yes
     */
    delFlag?: 0 | 1;
    deletePerson?: string;
    deleteTime?: string;
    /**
     * * NO: no
     * * YES: yes
     */
    deliveryScheduleFit2rd?: 0 | 1;
    deliveryScheduleFitReason2rd?: string;
    feedbackId?: string;
    interestReason2rd?: string;
    nps2rd?: number;
    petOwnerId?: string;
    qualityOfService1?: number;
    qualityOfService2?: number;
    rateComments?: string;
    rateDelivery?: number;
    ratePack?: number;
    storeId?: number;
    updatePerson?: string;
    updateTime?: string;
    vetClinicCheckup1?: number;
    vetClinicCheckup2?: number;
    veterinarianQualification1?: number;
    veterinarianQualification2?: number;
  };
  CustomerGetListRequest: {
    city?: string;
    customerAccount?: string;
    customerIds?: string[];
    email?: string;
    firstName?: string;
    lastName?: string;
    oktaId?: string;
    otherConditionsAnd?: definitions["OtherConditionsRequest"];
    otherConditionsOr?: definitions["OtherConditionsRequest"];
    /** page */
    pageNum?: number;
    pageRequest?: definitions["PageRequest"];
    /** size */
    pageSize?: number;
    pageable?: definitions["PageRequest"];
    sort?: definitions["Sort"];
    /** sort */
    sortColumn?: string;
    /** multiple sort */
    sortMap?: { [key: string]: string };
    /** sort rule desc or asc */
    sortRole?: string;
    /** sort type */
    sortType?: string;
    /** login user Id */
    userId?: string;
    userType?: string;
  };
  CustomerLegalPageResponse: {
    pageResponse?: definitions["MicroServicePage«UserConsentFormVO»"];
  };
  CustomerModifyRequest: {
    /** address1 */
    address1?: string;
    /** address2 */
    address2?: string;
    /** avatar */
    avatar?: string;
    /** birth_day */
    birthDay?: string;
    /** city */
    city?: string;
    /** contact_method */
    contactMethod?: string;
    /** country */
    country?: string;
    /** create_person */
    createPerson?: string;
    /** create_time */
    createTime?: string;
    /** customer account */
    customerAccount?: string;
    /** customer_address */
    customerAddress?: string;
    /** customer_from */
    customerFrom?: number;
    /** customerId */
    customerId?: string;
    /** delete_person */
    deletePerson?: string;
    /** delete_time */
    deleteTime?: string;
    /** email */
    email?: string;
    /** email_verified */
    emailVerified?: string;
    /** first_name */
    firstName?: string;
    /**
     * gender
     * * FEMALE: female
     * * MALE: male
     * * SECRET: secret
     */
    gender?: 0 | 1 | 2;
    /** language */
    language?: string;
    /** last_name */
    lastName?: string;
    /** mobile_phone */
    mobilePhone?: string;
    /** okta_id */
    oktaId?: string;
    /** okta_last_updated_time */
    oktaLastUpdatedTime?: string;
    /** okta_password_changed_time */
    oktaPasswordChangedTime?: string;
    /** okta_state */
    oktaState?: number;
    /** postal_code */
    postalCode?: string;
    /** profile_compilation */
    profileCompilation?: string;
    /** reference */
    reference?: string;
    /** region */
    region?: string;
    /** tag id list */
    tagging?: string[];
    /** timezone */
    timezone?: string;
    /** title */
    title?: string;
    /** update_person */
    updatePerson?: string;
    /** update_time */
    updateTime?: string;
    /** login user Id */
    userId?: string;
  };
  CustomerPageResponse: {
    customerDTOListPage?: definitions["MicroServicePage«CustomerDTO»"];
    pageResponse?: definitions["MicroServicePage«CustomerDetailVO»"];
  };
  CustomerPetsPropRelationDto: {
    /**
     * Delete flag
     * * NO: no
     * * YES: yes
     */
    delFlag?: 0 | 1;
    /** Attribute value */
    detailId?: number;
    /**
     * Whether to open index
     * * NO: no
     * * YES: yes
     */
    indexFlag?: 0 | 1;
    /** PetsId */
    petsId?: string;
    /** Attributes Id */
    propId?: number;
    /** Attribute name */
    propName?: string;
    propType?: string;
    /** the primary key */
    relationId?: string;
    /** ordering */
    sort?: number;
  };
  CustomerPetsPropRelationListVo: {
    petsPropRelationVo?: definitions["CustomerPetsPropRelationVo"][];
  };
  CustomerPetsPropRelationVo: {
    /** Creation time */
    createTime?: string;
    /**
     * Delete logo
     * * NO: no
     * * YES: yes
     */
    delFlag?: 0 | 1;
    /**
     * Whether to open index
     * * NO: no
     * * YES: yes
     */
    indexFlag?: 0 | 1;
    /** petsId */
    petsId?: string;
    /** Attributes Id */
    propId?: number;
    /** Attribute name */
    propName?: string;
    propType?: string;
    /** ordering */
    sort?: number;
    /** Modification time */
    updateTime?: string;
  };
  CustomerPetsVo: {
    /** activity */
    activity?: string;
    /** adult_target_weight */
    adultTargetWeight?: string;
    /** bcs */
    bcs?: number;
    /** beg */
    beg?: number;
    /** Pet birthday */
    birthOfPets?: string;
    /** birth_weight */
    birthWeight?: string;
    /** breeder_id */
    breederId?: string;
    /** breeder_prescription */
    breederPrescription?: string;
    /** certificate_id */
    certificateId?: string;
    /** certificate_info */
    certificateInfo?: string;
    /** coat_colour */
    coatColour?: string;
    /** complementary_information */
    complementaryInformation?: string;
    /** Pet account */
    consumerAccount?: string;
    /** country */
    country?: string;
    /** Creation time */
    createTime?: string;
    /** founder */
    creator?: string;
    /** current_risk */
    currentRisk?: string;
    /** customer_id */
    customerId?: string;
    /** One-to-many relationship，Multiple attribute numbers */
    customerPetsPropRelations?: definitions["CustomerPetsPropRelationDto"][];
    /** date_of_vaccination */
    dateOfVaccination?: string;
    /** death_date */
    deathDate?: string;
    /** declarative_product */
    declarativeProduct?: string;
    /**
     * Delete logo
     * * NO: no
     * * YES: yes
     */
    delFlag?: 0 | 1;
    /** description */
    description?: string;
    /** distinctive_signs */
    distinctiveSigns?: string;
    /** external_pet_id */
    externalPetId?: string;
    /** father_lof_number */
    fatherLofNumber?: string;
    /** gender_code */
    genderCode?: string;
    /** genetic_code */
    geneticCode?: string;
    /** hair */
    hair?: string;
    /** hair Length */
    hairLength?: string;
    /** icd */
    icd?: number;
    /** ideal_body_weight */
    idealBodyWeight?: string;
    /** ideal_product */
    idealProduct?: string;
    /** insured */
    insured?: string;
    /**
     * isOfflineStore
     * * NO: no
     * * YES: yes
     */
    isOfflineStore?: 0 | 1;
    /** isPurebred */
    isPurebred?: number;
    /**
     * is_reproducer
     * * NO: no
     * * YES: yes
     */
    isReproducer?: 0 | 1;
    /** last_pet_status */
    lastPetStatus?: string;
    /** last_weight */
    lastWeight?: string;
    /** lifestyle */
    lifestyle?: string;
    /** lof_number */
    lofNumber?: string;
    /** microchip_id */
    microchipId?: string;
    /** mother_lof_number */
    motherLofNumber?: string;
    /** needs */
    needs?: string;
    /**
     * Whether to neutered
     * * NO: 0:No
     * * YES: 1:Yes
     */
    neutered?: 0 | 1;
    /** owned_since */
    ownedSince?: string;
    /** owner_id */
    ownerId?: string;
    /** pathologies */
    pathologies?: string;
    /** pedigree_name */
    pedigreeName?: string;
    /** pet_activity_code */
    petActivityCode?: string;
    /** petAgeMonth */
    petAgeMonth?: string;
    /** petAgeYear */
    petAgeYear?: string;
    /** pet_source_id */
    petSourceId?: string;
    /** Pet breed */
    petsBreed?: string;
    /** Pet key，use UUID */
    petsId?: string;
    /** pets_img */
    petsImg?: string;
    /** Pet name */
    petsName?: string;
    /**
     * Pet sex
     * * M: 0:Male
     * * F: 1:Female
     */
    petsSex?: "0" | "1";
    /** Pet weight attribute value identification */
    petsSizeValueId?: string;
    /** Pet weight attribute value name */
    petsSizeValueName?: string;
    /** Pet category */
    petsType?: string;
    /** product id */
    productId?: string;
    /** profile_compilation */
    profileCompilation?: string;
    propRelationVos?: definitions["CustomerPetsPropRelationVo"][];
    /** reason */
    reason?: string;
    /** reason_of_death */
    reasonOfDeath?: string;
    /** reproduction_status_code */
    reproductionStatusCode?: string;
    segmentList?: definitions["CustomerTaggingVO"][];
    /** sensitivity */
    sensitivity?: string;
    /** size */
    size?: string;
    /**
     * source Type
     * * SYSTEM: system
     * * INDIVIDUAL: individual
     * * PETAPI: pet api
     */
    sourceType?: number;
    /** species_code */
    speciesCode?: string;
    /**
     * status
     * * NO: no
     * * YES: yes
     */
    status?: 0 | 1;
    /**
     * sterilisation
     * * NO: no
     * * YES: yes
     */
    sterilisation?: 0 | 1;
    /**
     * Whether to sterilize
     * * NO: 0:No
     * * YES: 1:Yes
     */
    sterilized?: 0 | 1;
    /** sterilized_date */
    sterilizedDate?: string;
    /** The store ID */
    storeId?: number;
    taggingVOList?: definitions["CustomerTaggingVO"][];
    /** tags */
    tags?: string;
    /** tattoo_id */
    tattooId?: string;
    /** time_of_birth */
    timeOfBirth?: string;
    /** time_of_death */
    timeOfDeath?: string;
    /** treatments */
    treatments?: string;
    /** Update time */
    updateTime?: string;
    /** update person */
    updator?: string;
    /** vaccinations */
    vaccinations?: string;
    /** value */
    value?: string;
    /** vet_id */
    vetId?: string;
    /** weight */
    weight?: string;
    /** weight48h */
    weight48h?: string;
    /**
     * weight_added
     * * NO: no
     * * YES: yes
     */
    weightAdded?: 0 | 1;
    /** weight_category */
    weightCategory?: string;
    /** weight Gain */
    weightGain?: number;
  };
  CustomerQuerySyncRequest: {
    userId?: string;
  };
  CustomerQuerySyncResponse: {
    activated?: string;
    created?: string;
    id?: string;
    lastLogin?: string;
    lastUpdated?: string;
    passwordChanged?: string;
    profile?: definitions["ProfileVO"];
    status?: string;
    statusChanged?: string;
    success?: boolean;
  };
  CustomerSearchVO: {
    customerAccount?: string;
    customerId?: string;
    customerName?: string;
    email?: string;
    firstName?: string;
    id?: string;
    lastName?: string;
    userType?: string;
  };
  CustomerSegmentsPageResponse: {
    pageResponse?: definitions["MicroServicePage«CustomerSegmentsVO»"];
  };
  CustomerSegmentsVO: {
    /**
     * coached flag
     * * NOCOACHED: no coached
     * * ISCOACHED: is coached
     */
    coached?: 0 | 1;
    /** condition */
    condition?: string;
    /** customer id */
    customerId?: string;
    /** handle */
    handle?: string;
    /** id */
    id?: string;
    /** segment name */
    segmentName?: string;
  };
  CustomerStoreRelation: {
    clubSegmentType?: "CAT" | "DOG" | "NEW_CUSTOMER" | "WELCOME_BOX" | "NONE";
    customerId?: string;
    enableFlag?: "0" | "1";
    storeId?: number;
  };
  CustomerTaggingAddRequest: {
    description?: string;
    isPublished?: boolean;
    name?: string;
    sort?: number;
    storeId?: number;
    taggingType?: "0" | "1";
  };
  CustomerTaggingPageResponse: {
    currentPage?: number;
    customerTaggingList?: definitions["CustomerTaggingVO"][];
    pageSize?: number;
    total?: number;
  };
  CustomerTaggingRequest: {
    createTime?: string;
    customerId?: string;
    delFlag?: boolean;
    description?: string;
    enableFlag?: "0" | "1";
    id?: string;
    isPublished?: boolean;
    name?: string;
    sort?: number;
    storeId?: number;
    tagging?: string[];
    taggingType?: "0" | "1";
    updateTime?: string;
  };
  CustomerTaggingStatusUpdateRequest: {
    id?: string;
    isPublished?: boolean;
  };
  CustomerTaggingUpdateRequest: {
    description?: string;
    id?: string;
    isPublished?: boolean;
    name?: string;
    sort?: number;
    storeId?: number;
    taggingType?: "0" | "1";
  };
  CustomerTaggingVO: {
    createTime?: string;
    customerNum?: string;
    delFlag?: boolean;
    delTime?: string;
    /** Segment描述 */
    description?: string;
    /** id */
    id?: string;
    /** 是否发布 */
    isPublished?: boolean;
    /** Segment名称 */
    name?: string;
    sort?: number;
    storeId?: number;
    taggingType?: "0" | "1";
    updateTime?: string;
  };
  CustomerUpdateProfile: {
    birthDate?: string;
    city?: string;
    countryCode?: string;
    firstName?: string;
    gender?: string;
    lastName?: string;
    mobilePhone?: string;
    preferredLanguage?: string;
    streetAddress?: string;
    streetAddress2?: string;
    title?: string;
  };
  CustomerUpdateSyncRequest: {
    profile?: definitions["CustomerUpdateProfile"];
    userId?: string;
  };
  CustomerUpdateSyncResponse: {
    success?: boolean;
  };
  CustomerVO: {
    /** account type */
    accountType?: "TEST" | "PROD" | "INTERNAL";
    /** address1 */
    address1?: string;
    /** address2 */
    address2?: string;
    /** customer age */
    age?: number;
    /** avatar */
    avatar?: string;
    /** birth_day */
    birthDay?: string;
    /** city */
    city?: string;
    /** contact_method */
    contactMethod?: string;
    /** country */
    country?: string;
    /** create_person */
    createPerson?: string;
    /** create_time */
    createTime?: string;
    /** customer_account */
    customerAccount?: string;
    /** customer_address */
    customerAddress?: string;
    /** customer detail */
    customerDetail?: definitions["CustomerDetailVO"];
    /** customer_detail_id */
    customerDetailId?: string;
    /** customer_from */
    customerFrom?: number;
    /** customer ID */
    customerId?: string;
    /** customer level id */
    customerLevelId?: number;
    /** customer_name */
    customerName?: string;
    /** customer tagging */
    customerTaggingList?: { [key: string]: any }[];
    /**
     * customer_type
     * * PLATFORM: 0:Platform customers/0:Store-related customers
     * * SUPPLIER: 1:Merchant customer/1:Store development customers
     */
    customerType?: 0 | 1;
    /** email */
    email?: string;
    /** email_verified */
    emailVerified?: string;
    /** first_name */
    firstName?: string;
    /**
     * gender
     * * FEMALE: female
     * * MALE: male
     * * SECRET: secret
     */
    gender?: 0 | 1 | 2;
    /** language */
    language?: string;
    /** last_name */
    lastName?: string;
    /** mobile_phone */
    mobilePhone?: string;
    /** okta_id */
    oktaId?: string;
    /** okta_last_updated_time */
    oktaLastUpdatedTime?: string;
    /** okta_password_changed_time */
    oktaPasswordChangedTime?: string;
    /** okta_state */
    oktaState?: number;
    /**
     * pet owner type
     * * OTHER: 0:other
     * * MEMBER: 1:member
     * * GUEST: 2:guest
     */
    petOwnerType?: 0 | 1 | 2;
    /** postal_code */
    postalCode?: string;
    /** profile_compilation */
    profileCompilation?: string;
    /** reference */
    reference?: string;
    /** region */
    region?: string;
    /** timezone */
    timezone?: string;
    /** title */
    title?: string;
    /** update time */
    updateTime?: string;
    /** user_type */
    userType?: string;
  };
  DeleteTaggingRequest: {
    idList?: string[];
  };
  FindTaggingListRequest: {
    displayStatus?: boolean;
    id?: string;
    storeId?: number;
    taggingFillColor?: string;
    taggingFontColor?: string;
    taggingIdList?: string[];
    taggingName?: string;
  };
  FindTaggingPageRequest: {
    displayStatus?: boolean;
    id?: string;
    /** page */
    pageNum?: number;
    pageRequest?: definitions["PageRequest"];
    /** size */
    pageSize?: number;
    pageable?: definitions["PageRequest"];
    showPage?: string;
    sort?: definitions["Sort"];
    /** sort */
    sortColumn?: string;
    /** multiple sort */
    sortMap?: { [key: string]: string };
    /** sort rule desc or asc */
    sortRole?: string;
    /** sort type */
    sortType?: string;
    storeId?: number;
    taggingFillColor?: string;
    taggingFontColor?: string;
    taggingIdList?: string[];
    taggingName?: string;
    taggingType?: string;
    /** login user Id */
    userId?: string;
  };
  FindTaggingPageResponse: {
    currentPage?: number;
    pageSize?: number;
    taggingList?: definitions["TaggingVO"][];
    total?: number;
  };
  GroupAddRequest: {
    /** group_handle */
    groupHandle?: string;
    /** group_name */
    groupName?: string;
    /** image */
    image?: string;
    /** show_ignore */
    showIgnore?: number;
    /** show_market */
    showMarket?: number;
    /** login user Id */
    userId?: string;
  };
  GroupEditRequest: {
    /** group_handle */
    groupHandle?: string;
    /** group_name */
    groupName?: string;
    /** id */
    id?: string;
    /** image */
    image?: string;
    /** show_ignore */
    showIgnore?: number;
    /** show_market */
    showMarket?: number;
    /** login user Id */
    userId?: string;
  };
  GroupPageResponse: {
    partnerGroupVOS?: definitions["MicroServicePage«PartnerGroupVO»"];
  };
  HistoryPageResponse: {
    partnerGroupHistoryVOS?: definitions["MicroServicePage«PartnerGroupHistoryVO»"];
  };
  HomeSearchResponse: {
    customers?: definitions["CustomerSearchVO"][];
    partners?: definitions["PartnerSearchVO"][];
  };
  JwtTokenRequest: {
    oktaToken?: string;
  };
  JwtTokenResponse: {
    email?: string;
    name?: string;
    preferredUsername?: string;
    token?: string;
  };
  MemberPageResponse: {
    partnerMemberVOS?: definitions["MicroServicePage«PartnerMemberVO»"];
  };
  "MicroServicePage«BreedCodeVO»": {
    /** content */
    content?: definitions["BreedCodeVO"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«BreedVO»": {
    /** content */
    content?: definitions["BreedVO"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«CollectionsWithRelatedProductsVO»": {
    /** content */
    content?: definitions["CollectionsWithRelatedProductsVO"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«ConsentVO»": {
    /** content */
    content?: definitions["ConsentVO"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«CustomerDTO»": {
    /** content */
    content?: definitions["CustomerDTO"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«CustomerDetailVO»": {
    /** content */
    content?: definitions["CustomerDetailVO"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«CustomerExcelHistoryVO»": {
    /** content */
    content?: definitions["CustomerExcelHistoryVO"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«CustomerFeedbackVO»": {
    /** content */
    content?: definitions["CustomerFeedbackVO"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«CustomerSegmentsVO»": {
    /** content */
    content?: definitions["CustomerSegmentsVO"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«PartnerBreedVO»": {
    /** content */
    content?: definitions["PartnerBreedVO"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«PartnerGroupHistoryVO»": {
    /** content */
    content?: definitions["PartnerGroupHistoryVO"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«PartnerGroupVO»": {
    /** content */
    content?: definitions["PartnerGroupVO"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«PartnerMemberVO»": {
    /** content */
    content?: definitions["PartnerMemberVO"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«PartnerRelationshipB2bVO»": {
    /** content */
    content?: definitions["PartnerRelationshipB2bVO"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«PartnerRelationshipB2cVO»": {
    /** content */
    content?: definitions["PartnerRelationshipB2cVO"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«PartnerVO»": {
    /** content */
    content?: definitions["PartnerVO"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«PetsAssignedPartnerContactsVo»": {
    /** content */
    content?: definitions["PetsAssignedPartnerContactsVo"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«PetsHealthContextVo»": {
    /** content */
    content?: definitions["PetsHealthContextVo"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«PetsOwnershipHistoryVo»": {
    /** content */
    content?: definitions["PetsOwnershipHistoryVo"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«PetsPurchasePlacePreferencesVo»": {
    /** content */
    content?: definitions["PetsPurchasePlacePreferencesVo"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«PetsWeightBcsSeriesVo»": {
    /** content */
    content?: definitions["PetsWeightBcsSeriesVo"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«PoxGoodsInfoPageVo»": {
    /** content */
    content?: definitions["PoxGoodsInfoPageVo"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«PoxGoodsPageVO»": {
    /** content */
    content?: definitions["PoxGoodsPageVO"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«ProductExcelHistoryVO»": {
    /** content */
    content?: definitions["ProductExcelHistoryVO"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«ProductGroupVO»": {
    /** content */
    content?: definitions["ProductGroupVO"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«ProductMemberVo»": {
    /** content */
    content?: definitions["ProductMemberVo"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  "MicroServicePage«UserConsentFormVO»": {
    /** content */
    content?: definitions["UserConsentFormVO"][];
    empty?: boolean;
    first?: boolean;
    last?: boolean;
    /** number */
    number?: number;
    numberOfElements?: number;
    /** size */
    size?: number;
    sort?: definitions["Sort"];
    /** total */
    total?: number;
    totalElements?: number;
    totalPages?: number;
  };
  OtherConditionsRequest: {
    petGuid?: string;
    petName?: string;
    postCode?: string;
  };
  PageRequest: {
    offset?: number;
    pageNumber?: number;
    pageSize?: number;
    paged?: boolean;
    sort?: definitions["Sort"];
    unpaged?: boolean;
  };
  PartnerBreedAddRequest: {
    breedCode?: string;
    breedName?: string;
    partnerId?: string;
    species?: string;
    universe?: string;
    /** login user Id */
    userId?: string;
  };
  PartnerBreedPageResponse: {
    partnerBreedVOS?: definitions["MicroServicePage«PartnerBreedVO»"];
  };
  PartnerBreedSpeciesResponse: {
    species?: string;
  };
  PartnerBreedUniversesResponse: {
    universe?: string;
  };
  PartnerBreedVO: {
    breedCode?: string;
    breedName?: string;
    createTime?: string;
    delFlag?: boolean;
    delTime?: string;
    externalId?: string;
    id?: string;
    origin?: boolean;
    partnerId?: string;
    species?: string;
    universe?: string;
    updateTime?: string;
  };
  PartnerGroupHistoryVO: {
    /** fileId */
    fileId?: string;
    /** groupId */
    groupId?: string;
    /** rows */
    rows?: number;
    /** uploadTime */
    uploadTime?: string;
    /** url */
    url?: string;
  };
  PartnerGroupVO: {
    /** active */
    active?: number;
    /** create_time */
    createTime?: string;
    /** del_flag */
    deleteFlag?: number;
    /** del_time */
    deleteTime?: string;
    /** group_handle */
    groupHandle?: string;
    /** group_name */
    groupName?: string;
    /** id */
    id?: string;
    /** image */
    image?: string;
    /** inactive */
    inactive?: number;
    /** origin */
    origin?:
      | "OriginEnumType.LOCAL(type=0, origin=local)"
      | "OriginEnumType.REMOTE(type=1, origin=remote)";
    /** show_ignore */
    showIgnore?: number;
    /** show_market */
    showMarket?: number;
    /** status */
    status?: number;
    /** update_time */
    updateTime?: string;
  };
  PartnerInvoiceQueryResponse: {
    /** partner invoice */
    partnerInvoice?: definitions["PartnerInvoiceVO"];
  };
  PartnerInvoiceVO: {
    /** city */
    city?: string;
    /** country */
    country?: string;
    /** create Time */
    createTime?: string;
    /**
     * del Flag
     * * NO: no
     * * YES: yes
     */
    delFlag?: 0 | 1;
    /** del Time */
    delTime?: string;
    /** id */
    id?: string;
    /** name */
    name?: string;
    /** origin */
    origin?:
      | "OriginEnumType.LOCAL(type=0, origin=local)"
      | "OriginEnumType.REMOTE(type=1, origin=remote)";
    /** partner Id */
    partnerId?: string;
    /** postalCode */
    postalCode?: string;
    /** region */
    region?: string;
    /** streetLine1 */
    streetLine1?: string;
    /** streetLine2 */
    streetLine2?: string;
    /** streetNo */
    streetNo?: string;
    /** update Time */
    updateTime?: string;
  };
  PartnerMemberVO: {
    /** city */
    city?: string;
    /** company_name */
    companyName?: string;
    /** country */
    country?: string;
    /** create_time */
    createTime?: string;
    /** customer_id */
    customerId?: string;
    /** del_flag */
    deleteFlag?: number;
    /** del_time */
    deleteTime?: string;
    /** id */
    id?: string;
    /** partner_group_id */
    partnerGroupId?: string;
    /** partner_id */
    partnerId?: string;
    /** post_code */
    postCode?: string;
    /** status */
    status?: number;
    /** terminals */
    terminals?: string;
    /** town */
    town?: string;
    /** update_time */
    updateTime?: string;
  };
  PartnerPageResponse: {
    /** partner page */
    partnerPage?: definitions["MicroServicePage«PartnerVO»"];
  };
  PartnerPublicQueryResponse: {
    /** partner public */
    partnerPublic?: definitions["PartnerPublicVO"];
  };
  PartnerPublicVO: {
    /** city */
    city?: string;
    /** closing hours */
    closingPeriods?: string;
    /** country */
    country?: string;
    /** create time */
    createTime?: string;
    /**
     * delete flag
     * * NO: no
     * * YES: yes
     */
    delFlag?: 0 | 1;
    /** delete time */
    delTime?: string;
    /** primary key */
    id?: string;
    /** name */
    name?: string;
    /** opening hours */
    openingHours?: string;
    /** origin */
    origin?:
      | "OriginEnumType.LOCAL(type=0, origin=local)"
      | "OriginEnumType.REMOTE(type=1, origin=remote)";
    /** partner id */
    partnerId?: string;
    /** postcode */
    postalCode?: string;
    /** region */
    region?: string;
    /** street line 1 */
    streetLine1?: string;
    /** street line 2 */
    streetLine2?: string;
    /** street no */
    streetNo?: string;
    /** update time */
    updateTime?: string;
    /** vat */
    vat?: string;
  };
  PartnerRcInformationEditRequest: {
    /** latitude */
    latitude?: string;
    /** longitude */
    longitude?: string;
    /** partner Id */
    partnerId?: string;
  };
  PartnerRcInformationEditResponse: {
    /** edit result */
    editResult?: definitions["PartnerVO"];
  };
  PartnerRcInformationQueryResponse: {
    /** partner */
    partner?: definitions["PartnerVO"];
    /** Partner GroupVO */
    partnerGroups?: definitions["PartnerGroupVO"][];
    /** partner invoice */
    partnerInvoice?: definitions["PartnerInvoiceVO"];
    /** partner public */
    partnerPublic?: definitions["PartnerPublicVO"];
  };
  PartnerRelationShipSyncAddRequest: {
    clientId?: string;
    companyId?: string;
    oktaId?: string;
    roles?: definitions["RelationShipSyncAddRoleDTO"][];
    type?: "PART_OF" | "CLIENT_OF";
  };
  PartnerRelationShipSyncAddResponse: {
    externalRelationShipId?: string;
    success?: boolean;
  };
  PartnerRelationShipSyncDeleteRequest: {
    externalRelationShipId?: string;
  };
  PartnerRelationShipSyncDeleteResponse: {
    success?: boolean;
  };
  PartnerRelationShipSyncEditRequest: {
    clientId?: string;
    companyId?: string;
    externalRelationShipId?: string;
    oktaId?: string;
    roles?: definitions["RelationShipSyncAddRoleDTO"][];
    type?: "PART_OF" | "CLIENT_OF";
  };
  PartnerRelationShipSyncEditResponse: {
    externalRelationShipId?: string;
    success?: boolean;
    updateOn?: string;
  };
  PartnerRelationShipSyncForCompanyIdResponse: {
    externalRelations?: definitions["RelationShipSyncQueryResultDTO"][];
    success?: boolean;
  };
  PartnerRelationShipSyncListRequest: { [key: string]: any };
  PartnerRelationShipSyncListResponse: {
    success?: boolean;
  };
  PartnerRelationshipB2bAddRequest: {
    clientId?: string;
    createOn?: string;
    createTime?: string;
    customerId?: string;
    delFlag?: number;
    delTime?: string;
    oktaId?: string;
    partnerId?: string;
    relationship?: string;
    roles?: string;
    updateOn?: string;
    updateTime?: string;
    userEmail?: string;
    userFirstName?: string;
    /** login user Id */
    userId?: string;
    userLastName?: string;
    userUid?: string;
  };
  PartnerRelationshipB2bPageResponse: {
    partnerRelationshipB2bVOS?: definitions["MicroServicePage«PartnerRelationshipB2bVO»"];
  };
  PartnerRelationshipB2bUpdateRequest: {
    clientId?: string;
    customerId?: string;
    externalRelationshipId?: string;
    id?: string;
    oktaId?: string;
    partnerId?: string;
    relationship?: string;
    roles?: string;
    updateOn?: string;
    userEmail?: string;
    userFirstName?: string;
    userLastName?: string;
    userUid?: string;
  };
  PartnerRelationshipB2bVO: {
    applicationName?: string;
    clientId?: string;
    companyName?: string;
    createOn?: string;
    createTime?: string;
    customerId?: string;
    delFlag?: number;
    delTime?: string;
    externalRelationshipId?: string;
    id?: string;
    origin?:
      | "OriginEnumType.LOCAL(type=0, origin=local)"
      | "OriginEnumType.REMOTE(type=1, origin=remote)";
    partnerId?: string;
    primaryContact?: "0" | "1";
    relationship?: string;
    roles?: string;
    status?: string;
    type?: string;
    updateOn?: string;
    updateTime?: string;
    userEmail?: string;
    userFirstName?: string;
    userLastName?: string;
    userUid?: string;
  };
  PartnerRelationshipB2cAddRequest: {
    createOn?: string;
    createTime?: string;
    customerId?: string;
    delFlag?: number;
    delTime?: string;
    oktaId?: string;
    partnerId?: string;
    relationship?: string;
    roles?: string;
    updateOn?: string;
    updateTime?: string;
    userEmail?: string;
    userFirstName?: string;
    /** login user Id */
    userId?: string;
    userLastName?: string;
    userUid?: string;
  };
  PartnerRelationshipB2cPageResponse: {
    partnerRelationshipB2cVOS?: definitions["MicroServicePage«PartnerRelationshipB2cVO»"];
  };
  PartnerRelationshipB2cUpdateRequest: {
    customerId?: string;
    externalRelationshipId?: string;
    id?: string;
    oktaId?: string;
    partnerId?: string;
    relationship?: string;
    roles?: string;
    updateOn?: string;
    userEmail?: string;
    userFirstName?: string;
    userLastName?: string;
    userUid?: string;
  };
  PartnerRelationshipB2cVO: {
    companyName?: string;
    createOn?: string;
    createTime?: string;
    customerId?: string;
    delFlag?: number;
    delTime?: string;
    externalRelationshipId?: string;
    id?: string;
    origin?:
      | "OriginEnumType.LOCAL(type=0, origin=local)"
      | "OriginEnumType.REMOTE(type=1, origin=remote)";
    partnerId?: string;
    relationship?: string;
    roles?: string;
    status?: string;
    type?: string;
    updateOn?: string;
    updateTime?: string;
    userEmail?: string;
    userFirstName?: string;
    userLastName?: string;
    userUid?: string;
  };
  PartnerRelationshipResponse: {
    partnerRelationshipVOS?: definitions["PartnerRelationshipVO"];
  };
  PartnerRelationshipVO: {
    clientId?: string;
    companyName?: string;
    customerId?: string;
    roles?: string;
    userEmail?: string;
    userFirstName?: string;
    userLastName?: string;
  };
  PartnerSearchVO: {
    /** company Name */
    companyName?: string;
    /** customer_id */
    customerId?: string;
    /** primary key */
    id?: string;
  };
  PartnerSynRequest: {
    customerId?: string;
    limit?: number;
    name?: string;
    page?: number;
    type?: string;
  };
  PartnerSynResponse: {
    customerId?: string;
    name?: string;
    type?: string;
  };
  PartnerVO: {
    /** admin Id */
    adminId?: string;
    /** city */
    city?: string;
    /** closingHours */
    closingHours?: string;
    /** company Name */
    companyName?: string;
    /** country */
    country?: string;
    /** create On */
    createOn?: string;
    /** create Time */
    createTime?: string;
    /** customer id */
    customerId?: string;
    /**
     * del Flag
     * * NO: no
     * * YES: yes
     */
    delFlag?: 0 | 1;
    /** del Time */
    delTime?: string;
    /** email */
    email?: string;
    /** emergency */
    emergency?: string;
    eshopUrl?: string;
    /** external company id */
    externalCompanyId?: string;
    /** external Customer Id */
    externalCustomerId?: string;
    /** external Id */
    externalId?: string;
    /** facebook */
    facebook?: string;
    /** fax */
    fax?: string;
    /** googlePlus */
    googlePlus?: string;
    /** group names */
    groupNames?: string;
    /** guid */
    guid?: string;
    /** primary key */
    id?: string;
    /** instagram */
    instagram?: string;
    /** latitude */
    latitude?: string;
    /** linkedin */
    linkedin?: string;
    /** longitude */
    longitude?: string;
    /** openingHours */
    openingHours?: string;
    /** origin */
    origin?:
      | "OriginEnumType.LOCAL(type=0, origin=local)"
      | "OriginEnumType.REMOTE(type=1, origin=remote)";
    /** parent Id */
    parentId?: string;
    /** parent Name */
    parentName?: string;
    /** partner Is Hidden */
    partnerIsHidden?: number;
    /** partnerLogoImage */
    partnerLogoImage?: string;
    /** phone */
    phone?: string;
    /** pinterest */
    pinterest?: string;
    /** postCode */
    postCode?: string;
    /** primaryContactEmail */
    primaryContactEmail?: string;
    /** primaryContactId */
    primaryContactId?: string;
    /** primaryContactLanguage */
    primaryContactLanguage?: string;
    /** referralCode */
    referralCode?: string;
    /** salesSupport */
    salesSupport?: string;
    /** salesrep */
    salesrep?: string;
    /** shop Url */
    shopUrl?: string;
    /** short Description */
    shortDescription?: string;
    /** snap */
    snap?: string;
    /** status */
    status?: string;
    /** subType */
    subType?: string;
    /** terminals */
    terminals?: string;
    /** timezone */
    timezone?: string;
    /** town */
    town?: string;
    /** twitter */
    twitter?: string;
    /** type */
    type?: string;
    /** update On */
    updateOn?: string;
    /** update Time */
    updateTime?: string;
    /** viadeo */
    viadeo?: string;
    /** webSite */
    webSite?: string;
    /** whatsapp */
    whatsapp?: string;
    /** youtube */
    youtube?: string;
  };
  Password: {
    value?: string;
  };
  PetsAssignedPartnerContactsPageResponse: {
    /** PetsAssignedPartnerContacts Page */
    petsAssignedPartnerContactsPage?: definitions["MicroServicePage«PetsAssignedPartnerContactsVo»"];
  };
  PetsAssignedPartnerContactsVo: {
    /** contact name */
    contactName?: string;
    /** partners */
    partners?: string;
    /** pets id */
    petsId?: string;
  };
  PetsHealthContextPageResponse: {
    /** PetsHealthContext Page */
    petsHealthContextPage?: definitions["MicroServicePage«PetsHealthContextVo»"];
  };
  PetsHealthContextVo: {
    /** context code */
    contextCode?: string;
    /** end date */
    endDate?: string;
    /** pets id */
    petsId?: string;
  };
  PetsIdsVo: {
    customerPetsVo?: definitions["CustomerPetsVo"][];
  };
  PetsOwnershipHistoryPageResponse: {
    /** PetsOwnershipHistory Page */
    petsOwnershipHistoryPage?: definitions["MicroServicePage«PetsOwnershipHistoryVo»"];
  };
  PetsOwnershipHistoryVo: {
    /** owner guid */
    ownerGuid?: string;
    /** owner name */
    ownerName?: string;
    /** pets  id */
    petsId?: string;
    /** transfer date */
    transferDate?: string;
  };
  PetsPurchasePlacePreferencesPageResponse: {
    /** PetsPurchasePlacePreferences Page */
    petsPurchasePlacePreferencesPage?: definitions["MicroServicePage«PetsPurchasePlacePreferencesVo»"];
  };
  PetsPurchasePlacePreferencesVo: {
    createTime?: string;
    /**
     * * NO: no
     * * YES: yes
     */
    delFlag?: 0 | 1;
    delTime?: string;
    id?: string;
    name?: string;
    petsId?: string;
    ratedOn?: string;
    rating?: string;
    updateTime?: string;
  };
  PetsWeightBcsSeriesPageResponse: {
    /** PetsWeightBcsSeries Page */
    petsWeightBcsSeriesPage?: definitions["MicroServicePage«PetsWeightBcsSeriesVo»"];
  };
  PetsWeightBcsSeriesVo: {
    /** bcs */
    bcs?: string;
    /** change date */
    changeDate?: string;
    /** partner ext id */
    partnerExtId?: number;
    /** source */
    source?: string;
    /** type */
    type?: string;
    /** weight */
    weight?: number;
  };
  PoxGoodsDetailVO: {
    /** collection pathology */
    collectionPathology?: string;
    /** collection pet stage */
    collectionPetStage?: string;
    /** collection range */
    collectionRange?: string;
    /** component does not contain */
    componentDoesNotContain?: string;
    /** components contains */
    componentsContains?: string;
    /** density */
    density?: string;
    /** energy level */
    energyLevel?: number;
    /** generic name */
    genericName?: string;
    /** id */
    id?: string;
    /** product brand */
    productBrand?: string;
    /** product list */
    productList?: string;
    /** reference */
    reference?: string;
    /** sorting weight */
    sortingWeight?: string;
  };
  PoxGoodsInfoPageResponse: {
    poxGoodsInfoPageVos?: definitions["MicroServicePage«PoxGoodsInfoPageVo»"];
  };
  PoxGoodsInfoPageVo: {
    code?: string;
    ean?: string;
    id?: string;
    label?: string;
  };
  PoxGoodsInfoResponse: {
    poxGoodsInfoVo?: definitions["PoxGoodsInfoVo"];
  };
  PoxGoodsInfoVo: {
    code?: string;
    collectionReference?: string;
    ean?: string;
    id?: string;
    label?: string;
    partnerPurchasePrice?: number;
    poxGoodsDetailVOS?: definitions["PoxGoodsDetailVO"];
    productFriendlyName?: string;
    productGrossWeight?: string;
    productGroupVOS?: definitions["ProductGroupVO"][];
    productNetWeight?: string;
    productPackagingContainerTypes?: string;
    productPackagingGrossWeight?: string;
    productPackagingUnits?: string;
    productPackagingValue?: string;
    recommendedRetailPrice?: number;
    status?: "0" | "1";
  };
  PoxGoodsPageResponse: {
    partnerGroupVOS?: definitions["MicroServicePage«PoxGoodsPageVO»"];
  };
  PoxGoodsPageVO: {
    /** generic name */
    genericName?: string;
    /** id */
    id?: string;
    /** product count */
    productCount?: number;
    /** reference */
    reference?: number;
  };
  PreferencesPageResponse: {
    consentVOList?: definitions["ConsentVO"][];
    currentPage?: number;
    pageSize?: number;
    total?: number;
  };
  PreferencesUpdateRequest: {
    ids?: string[];
    userId?: string;
  };
  ProductExcelHistoryVO: {
    /** history file */
    historyFile?: string;
    /** id */
    id?: string;
    /** history file */
    rows?: number;
    /** history file */
    upLoadTime?: string;
  };
  ProductFinderDTO: {
    item?: string;
    unit?: string;
    value?: string;
  };
  ProductFinderRequest: {
    /** page */
    pageNum?: number;
    pageRequest?: definitions["PageRequest"];
    /** size */
    pageSize?: number;
    pageable?: definitions["PageRequest"];
    productFinderDTO?: definitions["ProductFinderDTO"][];
    sort?: definitions["Sort"];
    /** sort */
    sortColumn?: string;
    /** multiple sort */
    sortMap?: { [key: string]: string };
    /** sort rule desc or asc */
    sortRole?: string;
    /** sort type */
    sortType?: string;
    /** login user Id */
    userId?: string;
  };
  ProductGroupPageResponse: {
    partnerGroupVOS?: definitions["MicroServicePage«ProductGroupVO»"];
  };
  ProductGroupResponse: {
    /** create_time */
    createTime?: string;
    /** handle */
    handle?: string;
    /** id */
    id?: string;
    /** name */
    name?: string;
    /** update_time */
    updateTime?: string;
  };
  ProductGroupVO: {
    /** count */
    count?: string;
    /** handle */
    handle?: string;
    /** id */
    id?: string;
    /** name */
    name?: string;
  };
  ProductHistoryPageResponse: {
    productExcelHistoryVOS?: definitions["MicroServicePage«ProductExcelHistoryVO»"];
  };
  ProductMemberAddRequest: {
    /** create_time */
    createTime?: string;
    /**
     * del_flag
     * * NO: no
     * * YES: yes
     */
    delFlag?: 0 | 1;
    /** delete_time */
    deleteTime?: string;
    /** goods_info_id */
    goodsInfoId?: string;
    /** id */
    id?: string;
    /** product_group_id */
    productGroupId?: string;
    /** update_time */
    updateTime?: string;
  };
  ProductMemberEditRequest: {
    code?: string;
    ean?: string;
    id?: string;
    label?: string;
    status?: "0" | "1";
  };
  ProductMemberPageResponse: {
    productMemberVos?: definitions["MicroServicePage«ProductMemberVo»"];
  };
  ProductMemberResponse: {
    /** create_time */
    createTime?: string;
    /**
     * del_flag
     * * NO: no
     * * YES: yes
     */
    delFlag?: 0 | 1;
    /** del_time */
    delTime?: string;
    /** goods_info_id */
    goodsInfoId?: string;
    /** id */
    id?: string;
    /** product_group_id */
    productGroupId?: string;
    /** update_time */
    updateTime?: string;
  };
  ProductMemberVo: {
    code?: string;
    /** create_time */
    createTime?: string;
    /**
     * del_flag
     * * NO: no
     * * YES: yes
     */
    delFlag?: 0 | 1;
    /** del_time */
    delTime?: string;
    ean?: string;
    /** goods_info_id */
    goodsInfoId?: string;
    /** id */
    id?: string;
    label?: string;
    /** product_group_id */
    productGroupId?: string;
    status?: "0" | "1";
    /** update_time */
    updateTime?: string;
  };
  ProductSaveRequest: {
    /** handle */
    handle?: string;
    /** id */
    id?: string;
    /** name */
    name?: string;
  };
  Profile: {
    accountType?: string;
    appartmentNo?: string;
    avatarUrl?: string;
    birthDate?: string;
    city?: string;
    countryCode?: string;
    department?: string;
    displayName?: string;
    district?: string;
    division?: string;
    email?: string;
    entranceNo?: string;
    externalId?: string;
    firstName?: string;
    gender?: string;
    honorificPrefix?: string;
    honorificSuffix?: string;
    house?: string;
    housing?: string;
    lastName?: string;
    locale?: string;
    login?: string;
    middleName?: string;
    mobilePhone?: string;
    nickName?: string;
    organization?: string;
    postalAddress?: string;
    preferredLanguage?: string;
    primaryPhone?: string;
    profileUrl?: string;
    region?: string;
    secondEmail?: string;
    source?: string;
    state?: string;
    streetAddress?: string;
    streetAddress2?: string;
    timezone?: string;
    title?: string;
    zipCode?: string;
  };
  ProfileVO: {
    accountType?: string;
    appartmentNo?: string;
    avatarUrl?: string;
    birthDate?: string;
    city?: string;
    countryCode?: string;
    department?: string;
    displayName?: string;
    district?: string;
    division?: string;
    email?: string;
    entranceNo?: string;
    externalId?: string;
    firstName?: string;
    gender?: string;
    honorificPrefix?: string;
    honorificSuffix?: string;
    house?: string;
    housing?: string;
    lastName?: string;
    locale?: string;
    login?: string;
    middleName?: string;
    mobilePhone?: string;
    nickName?: string;
    organization?: string;
    postalAddress?: string;
    preferredLanguage?: string;
    primaryPhone?: string;
    profileUrl?: string;
    region?: string;
    secondEmail?: string;
    source?: string;
    state?: string;
    streetAddress?: string;
    streetAddress2?: string;
    timezone?: string;
    title?: string;
    zipCode?: string;
  };
  RelationShipSyncAddRoleDTO: {
    appRoles?: string[];
    clientId?: string;
  };
  RelationShipSyncQueryResultDTO: {
    companyId?: string;
    createdAt?: string;
    id?: string;
    oktaId?: string;
    roles?: definitions["RelationShipSyncAddRoleDTO"][];
    schema?: string;
    type?: string;
    updatedAt?: string;
  };
  RelationshipPrimaryContactRequest: {
    id?: string;
    primaryContact?: "0" | "1";
  };
  SaveWelcomeBoxRequest: {
    customerTaggingRequestList?: definitions["CustomerTaggingRequest"][];
    storeId?: number;
  };
  SegmentCustomerRelAddRequest: {
    nameList?: string[];
    segmentId?: string;
    storeId?: number;
  };
  SegmentRelationAddRequest: {
    createdByUser?: string;
    relationId?: string;
    segmentIdList?: string[];
    storeId?: number;
    taggingType?: "0" | "1";
  };
  Sort: {
    empty?: boolean;
    sorted?: boolean;
    unsorted?: boolean;
  };
  TaggingVO: {
    createTime?: string;
    delFlag?: boolean;
    delTime?: string;
    displayStatus?: boolean;
    id?: string;
    productNum?: number;
    showPage?: string;
    sort?: number;
    storeId?: number;
    taggingFillColor?: string;
    taggingFontColor?: string;
    taggingImgUrl?: string;
    taggingName?: string;
    taggingType?: string;
    updateTime?: string;
  };
  UpdateTaggingRequest: {
    createTime?: string;
    delFlag?: boolean;
    delTime?: string;
    displayStatus?: boolean;
    id?: string;
    productNum?: number;
    showPage?: string;
    sort?: number;
    storeId?: number;
    taggingFillColor?: string;
    taggingFontColor?: string;
    taggingImgUrl?: string;
    taggingName?: string;
    taggingType?: string;
    updateTime?: string;
  };
  UserConsentFormVO: {
    /** consent id */
    consentId?: string;
    /**
     * consent type
     * * COLLECTIONPOINT: 0:Collection Point
     * * PROCESSINGPURPOSE: 1:Processing Purpose
     * * LEGALFORMS: 2:Legal Forms
     */
    consentType?: 0 | 1 | 2;
    /** createBy */
    date?: string;
    /** id */
    id?: string;
    /** consent title/name */
    name?: string;
    /** customer id */
    userId?: string;
    /** user type */
    userType?: string;
  };
  UserConsentVO: {
    communicationType?: string;
    consentCategory?: string;
    consentCode?: string;
    consentDesc?: string;
    consentGroup?: string;
    consentId?: string;
    consentPage?: string;
    consentTitle?: string;
    consentTitleType?: string;
    consentType?: "0" | "1" | "2";
    consentVersion?: string;
    createBy?: string;
    /** createTime */
    createTime?: string;
    deleteBy?: string;
    deleteFlag?: "0" | "1";
    /** deleteTime */
    deleteTime?: string;
    detailList?: definitions["ConsentDetailVO"][];
    filedType?: string;
    id?: string;
    languageTypeId?: number;
    openFlag?: "0" | "1";
    parentId?: number;
    pushOktaFlag?: "0" | "1";
    selected?: boolean;
    selectedFlag?: boolean;
    sendEmailFlag?: "0" | "1";
    sort?: number;
    storeId?: number;
    updateBy?: string;
    /** updateTime */
    updateTime?: string;
  };
}

export interface operations {
  applicationPageUsingGET: {
    parameters: {
      query: {
        /** keywords */
        keywords?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«ApplicationPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  breedCodePageUsingGET: {
    parameters: {
      query: {
        /** keywords */
        keywords?: string;
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«BreedCodePageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  pageUsingGET_1: {
    parameters: {
      query: {
        /** keywords */
        keywords?: string;
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«BreedPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  saveClubSegmentRelationUsingPOST: {
    parameters: {
      body: {
        /** request */
        request: definitions["ClubSegmentRelSaveRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«string»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  pageUsingGET: {
    parameters: {
      query: {
        code?: string;
        ean?: string;
        /** keywords */
        keywords?: string;
        label?: string;
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CollectionsWithRelatedProductsPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  consentListUsingGET: {
    parameters: {
      query: {
        consentCategory?: string;
        consentCode?: string;
        consentGroup?: string;
        consentId?: string;
        consentPage?: string;
        consentTitle?: string;
        consentTitleType?: string;
        consentType?: number;
        delFlag?: "NO" | "YES";
        filedType?: string;
        id?: string;
        keywords?: string;
        languageTypeId?: number;
        openFlag?: "NO" | "YES";
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        storeId?: number;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«ConsentQueryResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  editUsingPUT: {
    parameters: {
      body: {
        /** consentSaveInRequest */
        consentSaveInRequest: definitions["ConsentSaveInRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«ConsentVO»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  addUsingPOST: {
    parameters: {
      body: {
        /** consentSaveInRequest */
        consentSaveInRequest: definitions["ConsentSaveInRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«ConsentVO»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteConsentUsingDELETE: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«ConsentVO»"];
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  editCustomerUsingPUT: {
    parameters: {
      body: {
        /** request */
        request: definitions["CustomerModifyRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  updateUsingPUT: {
    parameters: {
      body: {
        /** request */
        request: definitions["CustomerCategoryUpdateRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerCategoryVO»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  addUsingPOST_1: {
    parameters: {
      body: {
        /** request */
        request: definitions["CustomerCategoryAddRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerCategoryVO»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  uploadImageUsingPOST: {
    parameters: {
      formData: {
        /** file */
        file: { [key: string]: any };
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«string»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  findByIdUsingGET: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerCategoryVO»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteUsingDELETE: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«object»"];
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  findPageUsingGET: {
    parameters: {
      query: {
        customerCategoryDiscount?: number;
        customerCategoryId?: string;
        customerCategoryName?: string;
        growthValue?: number;
        idList?: string[];
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        rankBadgeImg?: string;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        storeId?: number;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerCategoryPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  customerCoachedSegmentUsingGET: {
    parameters: {
      query: {
        coached?: "NOCOACHED" | "ISCOACHED";
        customerId?: string;
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerSegmentsPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  customerFeedbackUsingGET: {
    parameters: {
      query: {
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        /** Customer ID */
        petOwnerId?: string;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** Store ID */
        storeId?: number;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerFeedbackPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  alterFeedBackUsingPUT: {
    parameters: {
      body: {
        /** request */
        request: definitions["CustomerFeedbackSaveRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerFeedbackSaveResponse»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  findAllLegalByCustomerIdUsingGET: {
    parameters: {
      query: {
        customerId?: string;
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerLegalPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  queryByPetsIdUsingGET: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerPetsPropRelationListVo»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  findByPetsIdUsingGET: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerPetsVo»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteUsingDELETE_1: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«object»"];
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  customerSegmentUsingGET: {
    parameters: {
      query: {
        coached?: "NOCOACHED" | "ISCOACHED";
        customerId?: string;
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerSegmentsPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  querySyncUsingGET: {
    parameters: {
      body: {
        /** request */
        request: definitions["CustomerQuerySyncRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerQuerySyncResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  updateSyncUsingPUT: {
    parameters: {
      body: {
        /** request */
        request: definitions["CustomerUpdateSyncRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerUpdateSyncResponse»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  createSyncUsingPOST: {
    parameters: {
      body: {
        /** request */
        request: definitions["CustomerCreateSyncRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerCreateSyncResponse»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  updateUsingPUT_1: {
    parameters: {
      body: {
        /** request */
        request: definitions["CustomerTaggingUpdateRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerTaggingVO»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  addUsingPOST_2: {
    parameters: {
      body: {
        /** request */
        request: definitions["CustomerTaggingAddRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerTaggingVO»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  addSegmentCustomerRelUsingPOST: {
    parameters: {
      body: {
        /** request */
        request: definitions["SegmentCustomerRelAddRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  updateStatusUsingPUT: {
    parameters: {
      body: {
        /** request */
        request: definitions["CustomerTaggingStatusUpdateRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerTaggingVO»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  findByIdUsingGET_2: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerTaggingVO»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteUsingDELETE_2: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«object»"];
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  findPageUsingGET_1: {
    parameters: {
      query: {
        description?: string;
        id?: string;
        idList?: string[];
        isPublished?: boolean;
        name?: string;
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        storeId?: number;
        taggingType?: "PETOWNER" | "PET";
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerTaggingPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  customerB2CExcelUsingPOST: {
    parameters: {
      formData: {
        /** file */
        file: { [key: string]: any };
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  customerB2BExcelUsingPOST: {
    parameters: {
      formData: {
        /** file */
        file: { [key: string]: any };
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«List«CustomerBulkAddResponse»»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  findHistoryPageB2BUsingGET: {
    parameters: {
      query: {
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        type?: "OTHER" | "PET" | "CUSTOMER" | "B2B";
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerExcelHistoryPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  findHistoryPageUsingGET: {
    parameters: {
      query: {
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        type?: "OTHER" | "PET" | "CUSTOMER" | "B2B";
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerExcelHistoryPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  exportTemplateB2CUsingGET: {
    responses: {
      /** OK */
      200: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  exportTemplateB2BUsingGET: {
    responses: {
      /** OK */
      200: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  customerDetailUsingGET: {
    parameters: {
      path: {
        /** customerId */
        customerId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerDetailGetWithNotDeleteByCustomerIdResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  customerPageUsingGET: {
    parameters: {
      query: {
        /** area */
        areaId?: number;
        /** Review status (0: to be reviewed 1: approved 2: not approved) */
        checkState?: number;
        /** city */
        city?: string;
        /** city */
        cityId?: number;
        /** Accurate search - merchants under the customer */
        companyInfoId?: number;
        /** Account */
        customerAccount?: string;
        /** Member details identify the UUID */
        customerDetailId?: string;
        /** customer ID */
        customerId?: string;
        /** Customer IDs */
        customerIds?: string[];
        /** Customer level ID */
        customerLevelId?: number;
        /** Name of member */
        customerName?: string;
        /** Account Status */
        customerStatus?: "ENABLE" | "DISABLE";
        /** User type */
        customerType?: "PLATFORM" | "SUPPLIER";
        /** Delete flag */
        delFlag?: number;
        /** email */
        email?: string;
        /** In charge of the sales staff */
        employeeId?: string;
        /** Accurate Enquiry - Account */
        equalCustomerAccount?: string;
        /** first name */
        firstName?: string;
        /** Reasons for prohibition */
        forbidReason?: string;
        /** last name */
        lastName?: string;
        /** Mobile phone */
        mobilePhone?: string;
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        petGuid?: string;
        petGuidOr?: string;
        petName?: string;
        petNameOr?: string;
        /** petOwnerType */
        petOwnerType?: string;
        postCode?: string;
        postCodeOr?: string;
        /** province */
        provinceId?: number;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** login user Id */
        userId?: string;
        /** userType */
        userType?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  customerPageNewUsingPOST: {
    parameters: {
      body: {
        /** request */
        request: definitions["CustomerGetListRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerPageResponse»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  receiveDataUsingPOST: {
    responses: {
      /** OK */
      200: {
        schema: { [key: string]: any };
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  queryUsingGET: {
    parameters: {
      query: {
        /** keywords */
        keywords: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«HomeSearchResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  searchUsingGET: {
    parameters: {
      query: {
        /** keywords */
        keywords: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«HomeSearchResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  speciesCodeSyncUsingGET: {
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«object»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  loginOutUsingPOST: {
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«boolean»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  poOktaCallbackUsingPOST: {
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  getJwtTokenUsingPOST: {
    parameters: {
      body: {
        /** request */
        request: definitions["JwtTokenRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«JwtTokenResponse»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  editRcInformationUsingPUT: {
    parameters: {
      body: {
        /** request */
        request: definitions["PartnerRcInformationEditRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerRcInformationEditResponse»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  addUsingPOST_3: {
    parameters: {
      body: {
        /** partnerBreedAddRequest */
        partnerBreedAddRequest: definitions["PartnerBreedAddRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerBreedVO»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  speciesUsingGET: {
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«List«PartnerBreedSpeciesResponse»»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  breedSyncUsingGET: {
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«object»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  universesUsingGET: {
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«List«PartnerBreedUniversesResponse»»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteUsingDELETE_3: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerBreedVO»"];
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  pageUsingGET_2: {
    parameters: {
      query: {
        /** keywords */
        keywords?: string;
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerBreedPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  editUsingPUT_1: {
    parameters: {
      body: {
        /** groupAddRequest */
        groupAddRequest: definitions["GroupEditRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerGroupVO»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  addUsingPOST_4: {
    parameters: {
      body: {
        /** groupAddRequest */
        groupAddRequest: definitions["GroupAddRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerGroupVO»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  historyUsingGET: {
    parameters: {
      query: {
        /** group_Id */
        groupId?: string;
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«HistoryPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  findByIdUsingGET_3: {
    parameters: {
      query: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerMemberVO»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteMemberUsingDELETE: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerMemberVO»"];
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  memberUsingGET: {
    parameters: {
      query: {
        /** group id */
        groupId?: string;
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«MemberPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  downloadExcelUsingGET: {
    parameters: {
      path: {
        /** url */
        url: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  downloadImageUsingGET: {
    parameters: {
      path: {
        /** url */
        url: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  uploadExcelUsingPOST: {
    parameters: {
      formData: {
        /** file */
        file: { [key: string]: any };
      };
      query: {
        /** groupName */
        groupName: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«string»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  uploadImageUsingPOST_1: {
    parameters: {
      formData: {
        /** file */
        file: { [key: string]: any };
      };
      query: {
        /** groupName */
        groupName: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«string»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  exportGroupMemberUsingGET: {
    parameters: {
      query: {
        /** import member list */
        groupId?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  importPartnerGroupMemberUsingPOST: {
    parameters: {
      formData: {
        /** file */
        file: { [key: string]: any };
      };
      query: {
        /** groupId */
        groupId: string;
        /** isReplace */
        isReplace: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  exportTemplateUsingGET_1: {
    responses: {
      /** OK */
      200: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteUsingDELETE_4: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerGroupVO»"];
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  pageUsingGET_3: {
    parameters: {
      query: {
        /** group_name */
        groupName?: string;
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«GroupPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  queryUsingGET_1: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerInvoiceQueryResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  queryUsingGET_2: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerPublicQueryResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  updateUsingPUT_2: {
    parameters: {
      body: {
        /** request */
        request: definitions["PartnerRelationshipB2bUpdateRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerRelationshipB2bVO»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  addUsingPOST_5: {
    parameters: {
      body: {
        /** partnerRelationshipB2bAddRequest */
        partnerRelationshipB2bAddRequest: definitions["PartnerRelationshipB2bAddRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerRelationshipB2bVO»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  contactUsingGET: {
    parameters: {
      query: {
        /** keyword */
        keyword: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«HomeSearchResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  updatePrimaryContactUsingPUT: {
    parameters: {
      body: {
        /** request */
        request: definitions["RelationshipPrimaryContactRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  rolesUsingGET: {
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«Array«string»»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  findByIdUsingGET_4: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerRelationshipResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteUsingDELETE_5: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerRelationshipB2bVO»"];
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  pageUsingGET_4: {
    parameters: {
      query: {
        /** customerId */
        customerId?: string;
        /** keywords */
        keywords?: string;
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        /** partnerId */
        partnerId?: string;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerRelationshipB2bPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  updateUsingPUT_3: {
    parameters: {
      body: {
        /** request */
        request: definitions["PartnerRelationshipB2cUpdateRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerRelationshipB2cVO»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  addUsingPOST_6: {
    parameters: {
      body: {
        /** partnerRelationshipB2cAddRequest */
        partnerRelationshipB2cAddRequest: definitions["PartnerRelationshipB2cAddRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerRelationshipB2cVO»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  contactUsingGET_1: {
    parameters: {
      query: {
        /** keyword */
        keyword: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«HomeSearchResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  findByIdUsingGET_5: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerRelationshipResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteUsingDELETE_6: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerRelationshipB2cVO»"];
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  pageUsingGET_5: {
    parameters: {
      query: {
        /** customerId */
        customerId?: string;
        /** keywords */
        keywords?: string;
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        /** partnerId */
        partnerId?: string;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerRelationshipB2cPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  syncRelationShipByCompanyIdUsingPUT: {
    parameters: {
      body: {
        /** request */
        request: definitions["PartnerRelationShipSyncEditRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerRelationShipSyncEditResponse»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  addUsingPOST_7: {
    parameters: {
      body: {
        /** relationShipSyncListRequest */
        relationShipSyncListRequest: definitions["PartnerRelationShipSyncAddRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerRelationShipSyncAddResponse»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteUsingDELETE_7: {
    parameters: {
      body: {
        /** relationShipSyncListRequest */
        relationShipSyncListRequest: definitions["PartnerRelationShipSyncDeleteRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerRelationShipSyncDeleteResponse»"];
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  syncListUsingGET: {
    parameters: {
      body: {
        /** relationShipSyncListRequest */
        relationShipSyncListRequest: definitions["PartnerRelationShipSyncListRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerRelationShipSyncListResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  syncRelationShipByCompanyIdUsingGET: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerRelationShipSyncForCompanyIdResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  synchronizePartnerListUsingPOST: {
    parameters: {
      body: {
        /** request */
        request: definitions["PartnerSynRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerSynResponse»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  queryRcInformationUsingGET: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerRcInformationQueryResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  partnerPageUsingGET: {
    parameters: {
      query: {
        /** id */
        id?: string;
        /** keywords */
        keywords?: string;
        /** name */
        name?: string;
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PartnerPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  queryByPetsIdUsingGET_1: {
    parameters: {
      query: {
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        /** petsId 宠物所属的Id */
        petsId?: string;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PetsAssignedPartnerContactsPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  queryByPetsIdUsingGET_2: {
    parameters: {
      query: {
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        /** petsId 宠物所属的Id */
        petsId?: string;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PetsHealthContextPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  queryByPetsIdUsingGET_3: {
    parameters: {
      query: {
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        /** petsId 宠物所属的Id */
        petsId?: string;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PetsOwnershipHistoryPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  queryByPetsIdUsingGET_4: {
    parameters: {
      query: {
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        /** petsId 宠物所属的Id */
        petsId?: string;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PetsPurchasePlacePreferencesPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  queryByPetsIdUsingGET_5: {
    parameters: {
      query: {
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        /** petsId 宠物所属的Id */
        petsId?: string;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** type */
        type?: string;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PetsWeightBcsSeriesPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  importCustomerPetsListUsingPOST: {
    parameters: {
      formData: {
        /** file */
        file: { [key: string]: any };
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  exportTemplateUsingGET: {
    responses: {
      /** OK */
      200: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  historyPageUsingGET: {
    parameters: {
      query: {
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«CustomerExcelHistoryPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  findByIdUsingGET_1: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PetsIdsVo»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  pageUsingGET_6: {
    parameters: {
      query: {
        /** keyWord */
        keyWord?: string;
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PoxGoodsPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  detailByExtnernalIdUsingGET: {
    parameters: {
      path: {
        /** extnernalId */
        extnernalId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PoxGoodsDetailVO»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  detailUsingGET: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PoxGoodsDetailVO»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  pageUsingGET_7: {
    parameters: {
      query: {
        keyWords?: string;
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PoxGoodsInfoPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  queryUsingGET_3: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PoxGoodsInfoResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  syncPoxGoodsUsingGET: {
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«object»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  editUsingPUT_2: {
    parameters: {
      body: {
        /** request */
        request: definitions["ProductSaveRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«ProductGroupResponse»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  addUsingPOST_8: {
    parameters: {
      body: {
        /** request */
        request: definitions["ProductSaveRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«ProductGroupResponse»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  exportExcelUsingGET: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  excelHistoryUsingGET: {
    parameters: {
      query: {
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        /** product group id */
        productGroupId?: string;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«ProductHistoryPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  importExcelUsingPOST: {
    parameters: {
      formData: {
        /** file */
        file: { [key: string]: any };
      };
      query: {
        /** isReplace */
        isReplace: number;
        /** productGroupId */
        productGroupId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  exportTemplateUsingGET_2: {
    responses: {
      /** OK */
      200: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteUsingDELETE_8: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«ProductGroupResponse»"];
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  pageUsingGET_8: {
    parameters: {
      query: {
        /** keyWord */
        keyWord?: string;
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«ProductGroupPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  findByGroupIdUsingGET: {
    parameters: {
      query: {
        /** page */
        pageNum?: number;
        "pageRequest.offset"?: number;
        "pageRequest.pageNumber"?: number;
        "pageRequest.pageSize"?: number;
        "pageRequest.sort.sorted"?: boolean;
        "pageRequest.sort.unsorted"?: boolean;
        /** size */
        pageSize?: number;
        "pageable.offset"?: number;
        "pageable.pageNumber"?: number;
        "pageable.pageSize"?: number;
        "pageable.sort.sorted"?: boolean;
        "pageable.sort.unsorted"?: boolean;
        productGroupId?: string;
        "sort.sorted"?: boolean;
        "sort.unsorted"?: boolean;
        /** sort */
        sortColumn?: string;
        /** sort rule desc or asc */
        sortRole?: string;
        /** sort type */
        sortType?: string;
        /** login user Id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«ProductMemberPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  editUsingPUT_3: {
    parameters: {
      body: {
        /** productMemberEditRequest */
        productMemberEditRequest: definitions["ProductMemberEditRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  addUsingPOST_9: {
    parameters: {
      body: {
        /** requests */
        requests: definitions["ProductMemberAddRequest"][];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteUsingDELETE_9: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«ProductMemberResponse»"];
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  updateTaggingUsingPUT: {
    parameters: {
      body: {
        /** request */
        request: definitions["UpdateTaggingRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  addTaggingUsingPOST: {
    parameters: {
      body: {
        /** request */
        request: definitions["AddTaggingRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteTaggingUsingDELETE: {
    parameters: {
      body: {
        /** request */
        request: definitions["DeleteTaggingRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«object»"];
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  findTaggingListUsingGET: {
    parameters: {
      body: {
        /** request */
        request: definitions["FindTaggingListRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«List«TaggingVO»»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  findTaggingPageUsingGET: {
    parameters: {
      body: {
        /** request */
        request: definitions["FindTaggingPageRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«FindTaggingPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  findPageUsingPOST: {
    parameters: {
      body: {
        /** request */
        request: definitions["ProductFinderRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  addSegmentRelationUsingPOST: {
    parameters: {
      body: {
        /** request */
        request: definitions["SegmentRelationAddRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«object»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteSegmentCustomerRelByIdUsingDELETE: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«object»"];
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  speciesCodeSyncUsingGET_1: {
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«object»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  updateUsingPUT_4: {
    parameters: {
      body: {
        /** request */
        request: definitions["PreferencesUpdateRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PreferencesPageResponse»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  subscriptionPreferencesListUsingGET: {
    parameters: {
      path: {
        /** id */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«PreferencesPageResponse»"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  saveWelcomeBoxTagUsingPOST: {
    parameters: {
      body: {
        /** request */
        request: definitions["SaveWelcomeBoxRequest"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["BaseResponse«string»"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
}
